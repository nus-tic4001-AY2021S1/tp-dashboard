[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    mainClassName \u003d \"seedu.itlogger.ItLogger\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    archiveBaseName \u003d \"itlogger\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "jar {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        attributes \u0027Main-Class\u0027: \u0027seedu.itlogger.ItLogger\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "pigoliver": 8
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Design \u0026 implementation"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the design and implementation of the product. Use UML diagrams and short code snippets where applicable.}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "## Product scope"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "* Is a developer, tester or member of the project team."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "* prefer desktop apps over other types."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "* can type fast."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "* prefers typing to mouse interactions."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "* is reasonably comfortable using CLI apps."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "manage defects faster than a typical mouse/GUI driven app. Allows the user to better manage the project issues."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "## User Stories"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|Priority| As a … | I want to … | So that I can… |"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|* * * |new user|add issues into IT logger|track my issues|"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|* * * |New user|view an issue that is based on the ticket number|see its progress|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|* * * |New user|delete a defect|remove defects that are resolved or no longer required|"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|* * * |New user|list all issues currently in the ITLogger|find all of the recorded issues currently in ITLogger|"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|* * |New user|I would like a given issue format|so that I can know a structured way of using the app|"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|* |New user|I would like the issue I logged to be date stamped|so that I know when it was raised|"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|* * * |User|be able to load defects from a text file or database|View and track all defects previously recorded in the system|"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|* * * |User|Have a help guide|View the usage of the app|"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|* * * |User|Update information of existing defects|Keep track of those defects that have changed|"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|* * |user|Search defects based on my preference|Narrow down the search result based on what i want to look up|"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|* * * |User|Automatically save my records when the defect list has been changed|progression will not be lost|"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|* * |User|View my defect in a sorted order|More easily track my list of items|"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|* * * |Forgetful user|Be notified of my task that are due|Not forget what i need to fix and close|"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|* * * |User|Have a robust app|So that my data integrity is maintained (e.g. no deletion, cannot reopen after close)|"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "## Non-Functional Requirements"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "* Should work on any mainstream OS as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "* Should be able to hold up to 1000 defects without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "* A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "* Should load from and save to from a text files"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "* *Mainstream OS:* Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for manual testing"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "-": 26,
      "pigoliver": 28
    }
  },
  {
    "path": "docs/help.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pigoliver"
        },
        "content": " ____        _"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|  _ \\ _   _| | _____"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "ITLogger"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "Introduction:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "This is a logging software which allows tracking of software issues \u0026 assign them to the development team."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "  help"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    -- Print out help information"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "  exit"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    -- Exit from the program"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "  add t/\u003cTITLE\u003e s/\u003cSTATUS\u003e sv/\u003cSEVERITY in integer from 0 to 10\u003e dl/\u003cDEADLINE in dd-mm-yyyy format\u003e o/\u003cOWNER\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    -- Add a defect into the list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "  view v/\u003cTICKET in integer\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    -- View a defect which is indicated"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "  delete d/\u003cTICKET in integer\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    -- Delete a defect which is indicated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "  list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    -- List all defects in the list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "  update u/\u003cTICKET in integer\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    -- Go into update mode for a defect which is indicated"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "  update t/\u003cNEW TITLE\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    -- When in update mode, update the title of the defect"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "  update sv/\u003cNEW SEVERITY in integer from 0 to 10\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    -- When in update mode, update the severity of the defect"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "pigoliver": 38
    }
  },
  {
    "path": "src/main/java/seedu/itlogger/Defect.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tototto"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.Handler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tototto"
        },
        "content": "public class Defect {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tototto"
        },
        "content": "    String title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tototto"
        },
        "content": "    String status;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tototto"
        },
        "content": "    int severity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tototto"
        },
        "content": "    Date dateRaised;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tototto"
        },
        "content": "    Date deadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tototto"
        },
        "content": "    String owner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public void setStatus(String status) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public int getSeverity() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        return severity;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public void setSeverity(int severity) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        this.severity \u003d severity;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public Date getDeadline() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public void setDeadline(Date deadline) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public String getOwner() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        return owner;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public void setOwner(String owner) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        this.owner \u003d owner;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tototto"
        },
        "content": "    // Creating logger"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tototto"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Defect.class.getName());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public Defect(String title, String status, int severity, Date deadline, String owner) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tototto"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tototto"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tototto"
        },
        "content": "        this.severity \u003d severity;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        this.dateRaised \u003d Date.from(Instant.now());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tototto"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tototto"
        },
        "content": "        this.owner \u003d owner;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assert this.title !\u003d null : \"title cannot be empty\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assert this.status !\u003d null : \"status cannot be empty\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assert this.severity \u003e 0 : \"severity cannot be 0\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assert this.dateRaised !\u003d null : \"dateRaised cannot be empty\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assert this.deadline !\u003d null : \"deadline cannot be empty\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assert this.owner !\u003d null : \"owner cannot be empty\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tototto"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tototto"
        },
        "content": "            setupLogger();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tototto"
        },
        "content": "            logger.info(\"created defect Object successfully\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tototto"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tototto"
        },
        "content": "            System.out.println(\"Issue creating Log file\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tototto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tototto"
        },
        "content": "    /** Setup Logger for Defect class."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tototto"
        },
        "content": "     * @throws IOException unable to create file"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tototto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public static void setupLogger() throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tototto"
        },
        "content": "        // Remove the default console handler"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Logger parentLogger \u003d Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Handler[] handlers \u003d parentLogger.getHandlers();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tototto"
        },
        "content": "        for (Handler handler : handlers) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tototto"
        },
        "content": "            parentLogger.removeHandler(handler);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tototto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Handler fh \u003d new FileHandler(\"Defect.log\", true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tototto"
        },
        "content": "        fh.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.addHandler(fh);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.setLevel(Level.FINE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * toString method will convert Defect object into String"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * to print out."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @return String to print out for this Defect"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"MMM dd yyyy\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tototto"
        },
        "content": "        String strRep \u003d  \"Title: \" + title + System.lineSeparator()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                        + \"Status: \" + status + System.lineSeparator()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                        + \"Severity: Level \" + severity + System.lineSeparator()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                        + \"Date Raised: \" + dateFormat.format(dateRaised) + System.lineSeparator()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                        + \"Deadline: \" + dateFormat.format(deadline) + System.lineSeparator()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                        + \"Owner: \" + owner;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.info(\"printing object to string\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assert strRep !\u003d null : \"String representation of Defect cannot be empty\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tototto"
        },
        "content": "        return strRep;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tototto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhengShijieNUS": 42,
      "tototto": 65,
      "pigoliver": 17
    }
  },
  {
    "path": "src/main/java/seedu/itlogger/InputHandler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tototto"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.Handler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tototto"
        },
        "content": "public class InputHandler {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tototto"
        },
        "content": "    // Creating logger for InputHandler"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tototto"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(InputHandler.class.getName());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    private static Scanner inputStream \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public InputHandler() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tototto"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tototto"
        },
        "content": "            setupLogger();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tototto"
        },
        "content": "            logger.info(\"created InputHandler object successfully\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tototto"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tototto"
        },
        "content": "            System.out.println(\"Issue creating Log file\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tototto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public static void setupLogger() throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tototto"
        },
        "content": "        // Remove the default console handler"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Logger parentLogger \u003d Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Handler[] handlers \u003d parentLogger.getHandlers();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tototto"
        },
        "content": "        for (Handler handler : handlers) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tototto"
        },
        "content": "            parentLogger.removeHandler(handler);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tototto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Handler fh \u003d new FileHandler(\"InputHandler.log\", true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tototto"
        },
        "content": "        fh.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.addHandler(fh);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.setLevel(Level.FINE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static String getInput() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.info(\"getting user input\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tototto"
        },
        "content": "        return inputStream.nextLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static boolean hasNextLine() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.info(\"checking if have inputStream has next line\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return inputStream.hasNextLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tototto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tototto": 43,
      "pigoliver": 6
    }
  },
  {
    "path": "src/main/java/seedu/itlogger/Interface.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tototto"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.Vector;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tototto"
        },
        "content": "public class Interface {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    private static String LOGO \u003d  \" ____        _\\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tototto"
        },
        "content": "                                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tototto"
        },
        "content": "                                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tototto"
        },
        "content": "                                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tototto"
        },
        "content": "                                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    private static String ASK_NAME \u003d \"What is your name?\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    private static String GREETING_MSG \u003d \"Hello \";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    private static String PROGRAM_OPENING \u003d \"What would you like to do?\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tototto"
        },
        "content": "    private static String EMPTY_ERROR_MSG \u003d \"There are no items now\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tototto"
        },
        "content": "    private static String KEYWORD_ISSUE \u003d \"Keyword does not exists\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    private static String UPDATECONTENT_MSG \u003d \"Please specify the updating content. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            + \"Enter \\\"update e/exit\\\" to exit updating status.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public static void printUpdateContent() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        System.out.println(UPDATECONTENT_MSG);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static void printLogo() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tototto"
        },
        "content": "        System.out.println(LOGO);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static void askName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tototto"
        },
        "content": "        System.out.println(ASK_NAME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static void greeter(String name) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        System.out.println(GREETING_MSG + name);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static void programOpening() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tototto"
        },
        "content": "        System.out.println(PROGRAM_OPENING);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public static void keyWordIssue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tototto"
        },
        "content": "        System.out.println(KEYWORD_ISSUE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public static void displayIssues(Vector toBeDisplayed) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Iterator iter \u003d toBeDisplayed.iterator();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tototto"
        },
        "content": "        while (iter.hasNext()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tototto"
        },
        "content": "            Defect issue \u003d (Defect) iter.next();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tototto"
        },
        "content": "            System.out.println(issue + System.lineSeparator());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tototto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static void printFileToUser(String filePath) throws IOException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        BufferedReader bf \u003d new BufferedReader(new FileReader(filePath));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String nextLine \u003d bf.readLine();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        while (nextLine !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            System.out.println(nextLine);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            nextLine \u003d bf.readLine();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        bf.close();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static void printErrorMessageToUser(Exception errorMessage) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        System.out.println(\"ERROR: \" + errorMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public static void emptyErrorMsg() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tototto"
        },
        "content": "        System.out.println(EMPTY_ERROR_MSG);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tototto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhengShijieNUS": 6,
      "tototto": 41,
      "pigoliver": 26
    }
  },
  {
    "path": "src/main/java/seedu/itlogger/IssueList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tototto"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.Vector;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.Handler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tototto"
        },
        "content": "public class IssueList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tototto"
        },
        "content": "    // Creating Logger for IssueList"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tototto"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(IssueList.class.getName());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    private Vector\u003cDefect\u003e issueList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public IssueList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        issueList \u003d new Vector\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assert issueList !\u003d null : \"issueList should not be null after creation\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tototto"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tototto"
        },
        "content": "            setupLogger();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tototto"
        },
        "content": "            logger.info(\"created IssueList Object successfully\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tototto"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tototto"
        },
        "content": "            System.out.println(\"Issue creating Log file\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tototto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public static void setupLogger() throws IOException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tototto"
        },
        "content": "        // Remove the default console handler"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Logger parentLogger \u003d Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Handler[] handlers \u003d parentLogger.getHandlers();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tototto"
        },
        "content": "        for (Handler handler : handlers) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tototto"
        },
        "content": "            parentLogger.removeHandler(handler);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tototto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Handler fh \u003d new FileHandler(\"IssueList.log\", true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tototto"
        },
        "content": "        fh.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.addHandler(fh);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.setLevel(Level.FINE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public Vector\u003cDefect\u003e getIssue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.info(\"fetching all issues from issueList...\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assert issueList !\u003d null : \"issueList returned should not be null\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tototto"
        },
        "content": "        return issueList;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public void addIssue(Defect defect) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.info(\"adding an issue to issueList...\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tototto"
        },
        "content": "        issueList.add(defect);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assert issueList.size() \u003e 0 : \"issueList should not be empty\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public void deleteIssue(int index) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.info(\"deleting an issue from issueList...\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tototto"
        },
        "content": "        issueList.remove(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public Defect getDefect(int index) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.info(\"extracting an issue in issueList...\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assert issueList.get(index) !\u003d null : \"defect \" + index + \" retrieved should not be null\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        return issueList.get(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.info(\"getting total number of issues in issueList...\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assert issueList.size() \u003e\u003d 0 : \"issueList should be at least 0 size large\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        return issueList.size();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tototto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhengShijieNUS": 4,
      "tototto": 60,
      "JanuariusJang": 4,
      "pigoliver": 3
    }
  },
  {
    "path": "src/main/java/seedu/itlogger/ItLogger.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tototto"
        },
        "content": "import seedu.itlogger.exception.EmptyListException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.Vector;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.Handler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import static seedu.itlogger.InputHandler.getInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import static seedu.itlogger.InputHandler.hasNextLine;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import static seedu.itlogger.Interface.printFileToUser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Interface.printErrorMessageToUser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Interface.printLogo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Interface.programOpening;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import static seedu.itlogger.Interface.askName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import static seedu.itlogger.Interface.greeter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import static seedu.itlogger.Interface.keyWordIssue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import static seedu.itlogger.Interface.emptyErrorMsg;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import static seedu.itlogger.Interface.displayIssues;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseDeadline;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseKeyWord;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseOwner;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseSearchTerm;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseSearchType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseSeverity;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseStatus;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseTitle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Search.searchDeadline;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Search.searchOwner;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Search.searchSeverity;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Search.searchStatus;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Search.searchTitle;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "public class ItLogger {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tototto"
        },
        "content": "    /**."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tototto"
        },
        "content": "     * Logger for Main Class"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tototto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tototto"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(ItLogger.class.getName());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tototto"
        },
        "content": "        // Logger setup:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tototto"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tototto"
        },
        "content": "            // Remove the default console handler"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tototto"
        },
        "content": "            Logger parentLogger \u003d Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tototto"
        },
        "content": "            Handler[] handlers \u003d parentLogger.getHandlers();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tototto"
        },
        "content": "            for (Handler handler : handlers) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tototto"
        },
        "content": "                parentLogger.removeHandler(handler);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tototto"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tototto"
        },
        "content": "            Handler fh \u003d new FileHandler(\"ItLogger.log\", true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tototto"
        },
        "content": "            fh.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tototto"
        },
        "content": "            logger.addHandler(fh);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tototto"
        },
        "content": "            logger.setLevel(Level.FINE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tototto"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tototto"
        },
        "content": "            System.out.println(\"Issue creating Log file\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tototto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tototto"
        },
        "content": "        // Instantiating InputHandler only for logging purpose"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tototto"
        },
        "content": "        InputHandler inputHandler \u003d new InputHandler();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tototto"
        },
        "content": "        // Program starting point:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        IssueList issueList \u003d new IssueList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assert issueList !\u003d null : \"issueList should have been created\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.info(\"Creating ITLogger issue list...\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        printLogo();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        askName();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String userName \u003d \"\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        if (hasNextLine()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tototto"
        },
        "content": "            logger.info(\"Getting username from user...\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            userName \u003d getInput();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tototto"
        },
        "content": "            logger.fine(\"completed the obtaining of username...\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tototto"
        },
        "content": "            assert userName !\u003d \"\" : \"username should have been captured. Should not be empty\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tototto"
        },
        "content": "            assert userName !\u003d null : \"username should have been captured. Should not be null\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        greeter(userName);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        boolean keepRun \u003d true;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        while (keepRun) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tototto"
        },
        "content": "            logger.info(\"Beginning program run...\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            programOpening();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            String input \u003d \"\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            if (hasNextLine()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tototto"
        },
        "content": "                logger.info(\"getting instruction for program...\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                input \u003d getInput();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tototto"
        },
        "content": "                logger.info(\"finished getting instruction for program...\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tototto"
        },
        "content": "                assert input !\u003d \"\" : \"input should have been captured. Should not be empty\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            KeyWord command \u003d KeyWord.OTHERS;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tototto"
        },
        "content": "                command \u003d parseKeyWord(input.toUpperCase());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tototto"
        },
        "content": "                logger.config(\"updated config for ItLogger command\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tototto"
        },
        "content": "                assert command !\u003d KeyWord.OTHERS : \"proper keyword should be captured\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tototto"
        },
        "content": "                keyWordIssue();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tototto"
        },
        "content": "                logger.log(Level.WARNING, \"Non-existent keyword was captured! error is: \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tototto"
        },
        "content": "            //todo -\u003e build PARSER"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            case ADD: // Jian Cheng"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                // todo -\u003e add Defect"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                logger.info(\"Performing adding operation for ItLogger, add a new defect...\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    Defect newIssue \u003d new Defect(parseTitle(input), parseStatus(input),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                                        parseSeverity(input), parseDeadline(input), parseOwner(input));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    //System.out.println(test.toString());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    assert newIssue !\u003d null : \"Issue in creating new issue\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    issueList.addIssue(newIssue);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                } catch (ParseException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    printErrorMessageToUser(e);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    logger.log(Level.WARNING, \"Issue in parsing command: \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            case UPDATE: // Shijie"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                logger.info(\"Performing updating operation for ItLogger, update an existing defect...\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                    Defect defect \u003d issueList.getDefect(parseIndex(input,issueList.getSize()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                    boolean isExit \u003d false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                    do {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                        String updateCommandContent \u003d \"\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                        System.out.println(\"You are modifying:\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                        System.out.println(defect.toString());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                        Interface.printUpdateContent();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                        if (hasNextLine()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                            updateCommandContent \u003d getInput();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                            isExit \u003d Parser.parseUpdateContent(updateCommandContent,defect);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                    } while (isExit);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                } catch (ParseException e) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                    printErrorMessageToUser(e);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                    logger.log(Level.WARNING, \"Issue in parsing command: \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                    printErrorMessageToUser(e);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                    logger.log(Level.WARNING, \"Update occurs unknown error: \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            case VIEW: // Shi Jie"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                // todo -\u003e view ONE Defect with INDEX NUMBER"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                logger.info(\"Performing view operation for ItLogger, viewing specific defect...\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    System.out.println(issueList.getDefect(parseIndex(input,issueList.getSize())).toString());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                    logger.info(\"Obtained the specific defect...\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    int indexOfDefect \u003d parseIndex(input,issueList.getSize());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                    assert indexOfDefect \u003e\u003d 0 : \"Viewing index shall non-negative\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                    System.out.println(issueList.getDefect(indexOfDefect).toString());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                    logger.info(\"Finished obtaining the specific defect...\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                    logger.log(Level.WARNING,\"Problem viewing defect. error is: \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                    System.out.println(\"Please check the index value and also the correct format: \""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                            + \"VIEW /index. Eg:VIEW /1\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            case DELETE: // Jang"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                // todo -\u003e delete ONE Defect using INDEX NUMBER"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                logger.info(\"Begin deleting a specific Defect...\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    int indexDeletion \u003d parseIndex(input,issueList.getSize());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                    assert indexDeletion \u003e\u003d 0 : \"Deletion index must be non-negative\";"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                    assert indexDeletion \u003c\u003d issueList.getSize() : \"Deletion index must \""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                            + \"be equal or lesser than array size\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    issueList.deleteIssue(indexDeletion);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                    logger.info(\"Deletion of Defect successful\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                    logger.log(Level.WARNING, \"Pls check your index values. It is \""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                            + \"either greater than the largest value or a negative value.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                    System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                    logger.log(Level.WARNING, \"Some error have occurred. \""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                            + \"You must have entered an invalid index\" + e.getMessage());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            case LIST:  // Jun Wen"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                // todo -\u003e list ALL avaliable Defect in Issue List"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "tototto"
        },
        "content": "                logger.info(\"Performing listing operation for ItLogger, showing all defect...\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "tototto"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "tototto"
        },
        "content": "                    Vector toBeDisplayed \u003d issueList.getIssue();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "tototto"
        },
        "content": "                    logger.info(\"Obtained issueList...\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "tototto"
        },
        "content": "                    assert toBeDisplayed !\u003d null : \"IT logger issue list should exists\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "tototto"
        },
        "content": "                    if (toBeDisplayed.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "tototto"
        },
        "content": "                        logger.info(\"Problem displaying empty list...no item to show...\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "tototto"
        },
        "content": "                        assert toBeDisplayed.size() \u003d\u003d 0 : \"IT logger issue list should be empty here\";"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tototto"
        },
        "content": "                        throw new EmptyListException(\"The IT Logger Defect list is empty\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tototto"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tototto"
        },
        "content": "                        logger.info(\"printing issues\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tototto"
        },
        "content": "                        assert toBeDisplayed.size() \u003e 0 : \"There should be at least 1 issue to be displayed\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tototto"
        },
        "content": "                        displayIssues(toBeDisplayed);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tototto"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tototto"
        },
        "content": "                } catch (EmptyListException e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tototto"
        },
        "content": "                    logger.log(Level.WARNING,\"Problem displaying list. error is: \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tototto"
        },
        "content": "                    emptyErrorMsg();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tototto"
        },
        "content": "                }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tototto"
        },
        "content": "            case SEARCH: // Jun Wen"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tototto"
        },
        "content": "                // todo -\u003e Search (search by title, status, severity, deadline, owner)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tototto"
        },
        "content": "                String searchBy \u003d parseSearchType(input);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tototto"
        },
        "content": "                String searchTerm \u003d parseSearchTerm(input);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tototto"
        },
        "content": "                Vector\u003cDefect\u003e issues \u003d issueList.getIssue();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tototto"
        },
        "content": "                if (searchBy.equals(\"TITLE\")) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tototto"
        },
        "content": "                    displayIssues(searchTitle(searchTerm, issues));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tototto"
        },
        "content": "                } else if (searchBy.equals(\"STATUS\")) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tototto"
        },
        "content": "                    displayIssues(searchStatus(searchTerm, issues));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tototto"
        },
        "content": "                } else if (searchBy.equals(\"SEVERITY\")) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "tototto"
        },
        "content": "                    displayIssues(searchSeverity(searchTerm, issues));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "tototto"
        },
        "content": "                } else if (searchBy.equals(\"OWNER\")) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tototto"
        },
        "content": "                    displayIssues(searchOwner(searchTerm, issues));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "tototto"
        },
        "content": "                } else if (searchBy.equals(\"DEADLINE\")) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tototto"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tototto"
        },
        "content": "                        displayIssues(searchDeadline(searchTerm, issues));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tototto"
        },
        "content": "                    } catch (ParseException e) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tototto"
        },
        "content": "                        System.out.println(\"Issue parsing date searched\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tototto"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tototto"
        },
        "content": "                }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tototto"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            case HELP:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                logger.info(\"help operation started\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                String helpFilePath \u003d \"docs/help.txt\";"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                printFileToUser(helpFilePath);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            case EXIT:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tototto"
        },
        "content": "                logger.info(\"exiting program\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tototto"
        },
        "content": "                logger.config(\"updating program config to quit\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                keepRun \u003d false;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tototto"
        },
        "content": "                logger.warning(\"unknown keyword sent to IT logger as command\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                System.out.println(\"Unknown KeyWord, please try again!\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tototto"
        },
        "content": "            logger.info(\"completed an iteration of ItLogger logic flow.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhengShijieNUS": 32,
      "tototto": 122,
      "JanuariusJang": 14,
      "pigoliver": 97
    }
  },
  {
    "path": "src/main/java/seedu/itlogger/KeyWord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tototto"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tototto"
        },
        "content": "public enum KeyWord {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tototto"
        },
        "content": "    ADD,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    UPDATE,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tototto"
        },
        "content": "    VIEW,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tototto"
        },
        "content": "    DELETE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    LIST,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    EXIT,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tototto"
        },
        "content": "    SEARCH,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    HELP,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    OTHERS"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tototto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhengShijieNUS": 1,
      "tototto": 8,
      "pigoliver": 4
    }
  },
  {
    "path": "src/main/java/seedu/itlogger/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tototto"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tototto"
        },
        "content": "// Jian Cheng"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.util.logging.Handler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pigoliver"
        },
        "content": " * This Parser Class handles the String input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pigoliver"
        },
        "content": " * It will parse the string into respective output in"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pigoliver"
        },
        "content": " * correct format and type."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pigoliver"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tototto"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(IssueList.class.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tototto"
        },
        "content": "            // Remove the default console handler"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tototto"
        },
        "content": "            Logger parentLogger \u003d Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tototto"
        },
        "content": "            Handler[] handlers \u003d parentLogger.getHandlers();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tototto"
        },
        "content": "            for (Handler handler : handlers) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tototto"
        },
        "content": "                parentLogger.removeHandler(handler);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tototto"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            Handler fh \u003d new FileHandler(\"Parser.log\", true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            fh.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            logger.addHandler(fh);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            logger.setLevel(Level.FINE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            logger.info(\"Created Parser Object successfully\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            System.out.println(\"Issue in creating Log file\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * parseKeyWord method will parse the fullInput"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * and get KeyWord from fullInput."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @param fullInput -\u003e user\u0027s full command"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @return keyword provided by user and in KeyWord enum"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static KeyWord parseKeyWord(String fullInput) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        logger.info(\"parsing keyword from user input...\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String possibleKeyWord;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        if (fullInput.contains(\" \")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            possibleKeyWord \u003d fullInput.split(\" \")[0];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            possibleKeyWord \u003d fullInput;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assert possibleKeyWord !\u003d null : \"Empty command found from input\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return KeyWord.valueOf(possibleKeyWord);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * parseInputElement method will parse the input given"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * and return the element as String that is between startNotation"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * and endNotation."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @param input -\u003e input String to parse"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @param startNotation -\u003e notation to start the element"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @param endNotation -\u003e notation to end the element"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @return element that is between start and end notation as String type"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    protected static String parseInputElement(String input, String startNotation, String endNotation) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        logger.info(\"parsing element from index \" + startNotation + \" to \" + endNotation + \" in user input...\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        int elementStartIndex \u003d input.indexOf(startNotation) + startNotation.length();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        int elementEndIndex \u003d input.indexOf(endNotation);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String parsedResult \u003d input.substring(elementStartIndex,elementEndIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assert parsedResult !\u003d \"\" : \"Issue in parsing command\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return parsedResult;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * parseTitle method will parse the fullInput"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * and return Title of Defect for ADD Command."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @param fullInput -\u003e user\u0027s full command"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @return Defect title provided by user and in String type"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static String parseTitle(String fullInput) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        logger.info(\"parsing title from user input...\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String titleStartNotation \u003d \"t/\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String titleEndNotation \u003d \" s/\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return parseInputElement(fullInput,titleStartNotation,titleEndNotation);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * parseStatus method will parse the fullInput"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * and return Status of Defect for ADD Command."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @param fullInput -\u003e user\u0027s full command"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @return Defect status provided by user and in String type"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static String parseStatus(String fullInput) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        logger.info(\"parsing status from user input...\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String statusStartNotation \u003d \"s/\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String statusEndNotation \u003d \" sv/\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return parseInputElement(fullInput,statusStartNotation,statusEndNotation);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * parseSeverity method will parse the fullInput"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * and return Severity of Defect for ADD Command."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @param fullInput -\u003e user\u0027s full command"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @return Defect severity provided by user and in int type"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static int parseSeverity(String fullInput) throws ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        logger.info(\"parsing severity from user input...\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String severityStartNotation \u003d \"sv/\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String severityEndNotation \u003d \" dl/\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String severity \u003d parseInputElement(fullInput,severityStartNotation,severityEndNotation);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        int parsedResult;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            parsedResult \u003d Integer.parseInt(severity);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            throw new ParseException(\"Severity should be integer from 0 to 10\",0);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assert parsedResult \u003c\u003d 10 \u0026\u0026 parsedResult \u003e\u003d 0 : \"Severity should be integer from 0 to 10\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return parsedResult;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * parseDeadline method will parse the fullInput"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * and return Deadline of Defect for ADD Command."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @param fullInput -\u003e user\u0027s full command"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @return Defect deadline provided by user and in Date type"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static Date parseDeadline(String fullInput) throws ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        logger.info(\"parsing deadline from user input...\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String deadlineStartNotation \u003d \"dl/\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String deadlineEndNotation \u003d \" o/\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String deadline \u003d parseInputElement(fullInput,deadlineStartNotation, deadlineEndNotation);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        return new SimpleDateFormat(\"dd-MM-yyyy\", Locale.ENGLISH).parse(deadline);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * parseOwner method will parse the fullInput"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * and return Owner of Defect for ADD Command."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @param fullInput -\u003e user\u0027s full command"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @return Defect owner provided by user and in String type"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static String parseOwner(String fullInput) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        logger.info(\"parsing owner from user input...\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        int ownerStartIndex \u003d fullInput.indexOf(\"o/\") + 2;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String parsedResult \u003d fullInput.substring(ownerStartIndex);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assert parsedResult !\u003d \"\" : \"Issue in parsing command\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return parsedResult;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * parseIndex method will parse the fullInput and return"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * user indicated index for VIEW and DELETE Command."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @param fullInput -\u003e user\u0027s full command"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @return Defect index provided by user and in int type"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static int parseIndex(String fullInput, int size) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        logger.info(\"parsing index from user input...\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String possibleIndex \u003d fullInput.split(\"/\")[1];"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        int parsedResult \u003d Integer.parseInt(possibleIndex);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assert parsedResult \u003c\u003d size \u0026\u0026 parsedResult \u003e\u003d 0 : \"Index should be integer from 0 to \" + size;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return parsedResult;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public static String parseSearchType(String fullInput) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.info(\"parsing search type from user input...\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "tototto"
        },
        "content": "        String possibleSearchType \u003d fullInput.split(\"/\")[1];"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "tototto"
        },
        "content": "        return possibleSearchType.toUpperCase().trim();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public static String parseSearchTerm(String fullInput) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.info(\"parsing search term from user input...\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "tototto"
        },
        "content": "        String possibleSearchTerm \u003d fullInput.split(\"/\")[2];"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "tototto"
        },
        "content": "        return possibleSearchTerm;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public static boolean parseUpdateContent(String fullInput,Defect defect) throws ParseException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        logger.info(\"parsing UpdateContent from user input...\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        String cmd \u003d \"\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            cmd \u003d fullInput.split(\"/\")[0].substring(7);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            content \u003d fullInput.split(\"/\")[1];"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            throw new ParseException(\"Command has error.Please check.\",1);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        switch (cmd) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        case \"t\":"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            defect.setTitle(content);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        case \"s\":"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            defect.setStatus(content);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        case \"sv\":"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            defect.setSeverity(Integer.parseInt(content));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        case \"dl\":"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            defect.setDeadline(new SimpleDateFormat(\"dd-MM-yyyy\", Locale.ENGLISH).parse(content));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        case \"o\":"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            defect.setOwner(content);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        case \"e\":"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tototto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhengShijieNUS": 35,
      "tototto": 27,
      "pigoliver": 158
    }
  },
  {
    "path": "src/main/java/seedu/itlogger/Search.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tototto"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.Vector;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tototto"
        },
        "content": "public class Search {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public static Vector searchTitle(String searchTerm, Vector\u003cDefect\u003e issueList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Iterator iter \u003d issueList.iterator();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Vector\u003cDefect\u003e result \u003d new Vector\u003cDefect\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tototto"
        },
        "content": "        while (iter.hasNext()) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tototto"
        },
        "content": "            Defect curr \u003d (Defect)iter.next();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tototto"
        },
        "content": "            if (curr.getTitle().contains(searchTerm)) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tototto"
        },
        "content": "                result.add(curr);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tototto"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tototto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tototto"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public static Vector searchStatus(String status, Vector\u003cDefect\u003e issueList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Iterator iter \u003d issueList.iterator();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Vector\u003cDefect\u003e result \u003d new Vector\u003cDefect\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tototto"
        },
        "content": "        while (iter.hasNext()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tototto"
        },
        "content": "            Defect curr \u003d (Defect)iter.next();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tototto"
        },
        "content": "            if (curr.getStatus().contains(status)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tototto"
        },
        "content": "                result.add(curr);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tototto"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tototto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tototto"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public static Vector searchSeverity(String severity, Vector\u003cDefect\u003e issueList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tototto"
        },
        "content": "        int parsedSeverity \u003d Integer.parseInt(severity);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Iterator iter \u003d issueList.iterator();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Vector\u003cDefect\u003e result \u003d new Vector\u003cDefect\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tototto"
        },
        "content": "        while (iter.hasNext()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tototto"
        },
        "content": "            Defect curr \u003d (Defect)iter.next();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tototto"
        },
        "content": "            if (curr.getSeverity() \u003d\u003d parsedSeverity) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tototto"
        },
        "content": "                result.add(curr);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tototto"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tototto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tototto"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public static Vector searchDeadline(String deadline, Vector\u003cDefect\u003e issueList) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Date date \u003d new SimpleDateFormat(\"dd-MM-yyyy\", Locale.ENGLISH).parse(deadline);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Iterator iter \u003d issueList.iterator();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Vector\u003cDefect\u003e result \u003d new Vector\u003cDefect\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tototto"
        },
        "content": "        while (iter.hasNext()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tototto"
        },
        "content": "            Defect curr \u003d (Defect)iter.next();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tototto"
        },
        "content": "            if (curr.getDeadline().compareTo(date) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tototto"
        },
        "content": "                result.add(curr);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tototto"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tototto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tototto"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public static Vector searchOwner(String owner, Vector\u003cDefect\u003e issueList) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Iterator iter \u003d issueList.iterator();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Vector\u003cDefect\u003e result \u003d new Vector\u003cDefect\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tototto"
        },
        "content": "        while (iter.hasNext()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tototto"
        },
        "content": "            Defect curr \u003d (Defect)iter.next();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tototto"
        },
        "content": "            if (curr.getOwner().contains(owner)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tototto"
        },
        "content": "                result.add(curr);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tototto"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tototto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tototto"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tototto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tototto": 78
    }
  },
  {
    "path": "src/main/java/seedu/itlogger/Status.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tototto"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tototto"
        },
        "content": "public enum Status {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tototto"
        },
        "content": "    New,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tototto"
        },
        "content": "    Accepted,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tototto"
        },
        "content": "    Pending,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tototto"
        },
        "content": "    Closed,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tototto"
        },
        "content": "    Rejected,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tototto"
        },
        "content": "    Expired"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tototto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tototto": 10
    }
  },
  {
    "path": "src/main/java/seedu/itlogger/exception/EmptyListException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tototto"
        },
        "content": "package seedu.itlogger.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tototto"
        },
        "content": "public class EmptyListException extends ItLoggerException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public EmptyListException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tototto"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tototto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tototto": 8
    }
  },
  {
    "path": "src/main/java/seedu/itlogger/exception/ItLoggerException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "package seedu.itlogger.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "public class ItLoggerException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public ItLoggerException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pigoliver": 7
    }
  },
  {
    "path": "src/test/java/seedu/itlogger/DefectTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tototto"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tototto"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tototto"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseDeadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseOwner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseSeverity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseStatus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseTitle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tototto"
        },
        "content": "public class DefectTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tototto"
        },
        "content": "    String input;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tototto"
        },
        "content": "    Defect defect;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tototto"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public void defectTestSetup() throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tototto"
        },
        "content": "        input \u003d \"ADD t/Test s/New sv/1 dl/20-10-2020 o/Tester\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tototto"
        },
        "content": "        defect \u003d new Defect(parseTitle(input), parseStatus(input),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tototto"
        },
        "content": "                parseSeverity(input), parseDeadline(input), parseOwner(input));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tototto"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public void printingDefectTest() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tototto"
        },
        "content": "        // Todo -\u003e Write Test Here"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"MMM dd yyyy\",Locale.ENGLISH);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        String result \u003d \"Title: \" + \"Test\" + System.lineSeparator()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Status: \" + \"New\" + System.lineSeparator()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Severity: Level \" + \"1\" + System.lineSeparator()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Date Raised: \" + dateFormat.format(Date.from(Instant.now())) + System.lineSeparator()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Deadline: \" + \"Oct 20 2020\" + System.lineSeparator()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Owner: \" + \"Tester\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        assertEquals(defect.toString(), result);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tototto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhengShijieNUS": 13,
      "tototto": 30
    }
  },
  {
    "path": "src/test/java/seedu/itlogger/DeleteFunctionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "public class DeleteFunctionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    public void deleteFunctionTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        IssueList issueList \u003d new IssueList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "            issueList.addIssue(new Defect(\"cannot launch\", \"new\", 1,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                    new SimpleDateFormat(\"dd/MM/yyyy\").parse(\"20/10/2020\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                    \"Jack\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "            issueList.addIssue(new Defect(\"cannot login\", \"new\", 1,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                    new SimpleDateFormat(\"dd/MM/yyyy\").parse(\"20/10/2020\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                    \"Jack\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "            issueList.addIssue(new Defect(\"cannot exit\", \"new\", 1,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                    new SimpleDateFormat(\"dd/MM/yyyy\").parse(\"20/10/2020\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                    \"Jack\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        //checks number of tasks created."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        assertEquals(3, issueList.getSize());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        //deletes the first item"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        issueList.deleteIssue(0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        //check that title of the next item"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        assertEquals(\"cannot login\", issueList.getDefect(0).title);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        //deletes the next item which is now index 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        issueList.deleteIssue(0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        //check that title of the next item"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        assertEquals(\"cannot exit\", issueList.getDefect(0).title);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        //deletes the next item which is now index 0"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        issueList.deleteIssue(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        //checks number of tasks left."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        assertEquals(0, issueList.getSize());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JanuariusJang": 45
    }
  },
  {
    "path": "src/test/java/seedu/itlogger/IssueListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tototto"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tototto"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tototto"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.Vector;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseStatus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseTitle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseSeverity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseDeadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseOwner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tototto"
        },
        "content": "public class IssueListTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tototto"
        },
        "content": "    private IssueList issueList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tototto"
        },
        "content": "    private Defect defect;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tototto"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tototto"
        },
        "content": "    private int defectNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tototto"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public void issueListTestSetup() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tototto"
        },
        "content": "        defectNumber \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tototto"
        },
        "content": "        input \u003d \"ADD t/Test s/New sv/1 dl/20-10-2020 o/Tester\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tototto"
        },
        "content": "        issueList \u003d new IssueList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tototto"
        },
        "content": "        defect \u003d new Defect(parseTitle(input), parseStatus(input),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tototto"
        },
        "content": "                parseSeverity(input), parseDeadline(input), parseOwner(input));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tototto"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public void getIssueTest() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Vector\u003cDefect\u003e result \u003d issueList.getIssue();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assertEquals(result.size(), 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tototto"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public void addIssueTest() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tototto"
        },
        "content": "        issueList.addIssue(defect);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assertEquals(issueList.getIssue().size(), 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tototto"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public void getDefectTest() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tototto"
        },
        "content": "        addIssueTest();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Defect result \u003d issueList.getDefect(defectNumber);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assertEquals(result, defect);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tototto"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public void deleteIssueTest() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tototto"
        },
        "content": "        addIssueTest();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tototto"
        },
        "content": "        issueList.deleteIssue(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assertEquals(issueList.getIssue().size(), 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tototto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tototto": 56
    }
  },
  {
    "path": "src/test/java/seedu/itlogger/ItLoggerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tototto"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "class ItLoggerTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tototto": 2,
      "-": 11,
      "pigoliver": 1
    }
  },
  {
    "path": "src/test/java/seedu/itlogger/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import static seedu.itlogger.Parser.parseKeyWord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public void simpleTest() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String testText \u003d \"ADD t/Test s/New sv/1 dl/20-10-2020 o/Tester\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assertEquals(Parser.parseKeyWord(testText),KeyWord.ADD);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assertEquals(Parser.parseStatus(testText),\"New\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assertEquals(Parser.parseTitle(testText),\"Test\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            assertEquals(Parser.parseSeverity(testText),1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            assertEquals(Parser.parseDeadline(testText), new SimpleDateFormat(\"dd/MM/yyyy\").parse(\"20/10/2020\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assertEquals(Parser.parseOwner(testText),\"Tester\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public void viewKeyWordTest() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String testText \u003d \"VIEW v/10\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assertEquals(Parser.parseKeyWord(testText),KeyWord.VIEW);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assertEquals(Parser.parseIndex(testText,10),10);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public void deleteKeyWordTest() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String testText \u003d \"DELETE d/11\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assertEquals(Parser.parseKeyWord(testText),KeyWord.DELETE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assertEquals(Parser.parseIndex(testText,11),11);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pigoliver": 40
    }
  },
  {
    "path": "src/test/java/seedu/itlogger/ViewFunctionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import static seedu.itlogger.Parser.parseTitle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import static seedu.itlogger.Parser.parseStatus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import static seedu.itlogger.Parser.parseSeverity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import static seedu.itlogger.Parser.parseIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import static seedu.itlogger.Parser.parseDeadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import static seedu.itlogger.Parser.parseOwner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "public class ViewFunctionTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    IssueList issueList \u003d new IssueList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"MMM dd yyyy\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    String input1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    Defect defect1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    String input2;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    Defect defect2;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    String input3;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    Defect defect3;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public void viewFunctionTestSetup() throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        input1 \u003d \"ADD t/cannot launch s/new sv/1 dl/20-10-2020 o/Jack\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        defect1 \u003d new Defect(parseTitle(input1), parseStatus(input1),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                parseSeverity(input1), parseDeadline(input1), parseOwner(input1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        input2 \u003d \"ADD t/cannot login s/new sv/1 dl/20-10-2020 o/Jack\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        defect2 \u003d new Defect(parseTitle(input2), parseStatus(input2),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                parseSeverity(input2), parseDeadline(input2), parseOwner(input2));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        input3 \u003d \"ADD t/cannot exit s/new sv/1 dl/20-10-2020 o/Jack\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        defect3 \u003d new Defect(parseTitle(input3), parseStatus(input3),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                parseSeverity(input3), parseDeadline(input3), parseOwner(input3));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        issueList.addIssue(defect1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        issueList.addIssue(defect2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        issueList.addIssue(defect3);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public void viewFunctionTest() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assertEquals(issueList.getDefect(parseIndex(\"/0\", issueList.getSize())).toString(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                \"Title: \" + \"cannot launch\" + System.lineSeparator()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Status: \" + \"new\" + System.lineSeparator()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Severity: Level \" + \"1\" + System.lineSeparator()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Date Raised: \" + dateFormat.format(Date.from(Instant.now())) + System.lineSeparator()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Deadline: \" + \"Oct 20 2020\" + System.lineSeparator()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Owner: \" + \"Jack\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assertEquals(issueList.getDefect(parseIndex(\"/1\", issueList.getSize())).toString(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                \"Title: \" + \"cannot login\" + System.lineSeparator()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Status: \" + \"new\" + System.lineSeparator()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Severity: Level \" + \"1\" + System.lineSeparator()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Date Raised: \" + dateFormat.format(Date.from(Instant.now())) + System.lineSeparator()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Deadline: \" + \"Oct 20 2020\" + System.lineSeparator()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Owner: \" + \"Jack\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assertEquals(issueList.getDefect(parseIndex(\"/2\", issueList.getSize())).toString(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                \"Title: \" + \"cannot exit\" + System.lineSeparator()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Status: \" + \"new\" + System.lineSeparator()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Severity: Level \" + \"1\" + System.lineSeparator()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Date Raised: \" + dateFormat.format(Date.from(Instant.now())) + System.lineSeparator()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Deadline: \" + \"Oct 20 2020\" + System.lineSeparator()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Owner: \" + \"Jack\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public void viewFunctionExceptionTest() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        Exception exception \u003d assertThrows(ArrayIndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            issueList.getDefect(parseIndex(\"0\", issueList.getSize())).toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        });"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        String expectedMessage \u003d \"Index 1 out of bounds for length 1\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        String actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhengShijieNUS": 90,
      "pigoliver": 4
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "James Gosling"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "EXIT"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "pigoliver": 1
    }
  }
]
