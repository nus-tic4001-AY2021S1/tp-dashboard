[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    mainClassName \u003d \"seedu.itlogger.ItLogger\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    archiveBaseName \u003d \"itlogger\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "jar {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        attributes \u0027Main-Class\u0027: \u0027seedu.itlogger.ItLogger\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 44,
      "pigoliver": 8
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "## Design"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "//todo overview"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tototto"
        },
        "content": "## Architechture"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the design and implementation of the product. Use UML diagrams and short code snippets where applicable.}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tototto"
        },
        "content": "![Image of UpdateSequenceDiagram](https://github.com/AY2021S1-TIC4001-3/tp/blob/master/docs/Images/architecture.png)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tototto"
        },
        "content": "The Architecture Diagram given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tototto"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tototto"
        },
        "content": "UI: The UI of the App."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tototto"
        },
        "content": "Main: The main logic handler of the App."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tototto"
        },
        "content": "Commons: The control variable of the App."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tototto"
        },
        "content": "Storage: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tototto"
        },
        "content": "Finder: Searches and sort the data"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tototto"
        },
        "content": "IssueList: Define the structure of each issue to track."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tototto"
        },
        "content": "Each of the six components,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tototto"
        },
        "content": "## How the architecture components interact with each other"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tototto"
        },
        "content": "The Sequence Diagram below shows how the components interact with each other for the scenario where the user issues the command delete 1."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tototto"
        },
        "content": "## UI component"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tototto"
        },
        "content": "![Image of UI Class Diagram](https://github.com/AY2021S1-TIC4001-3/tp/blob/master/docs/Images/interface.png)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "The UI componenet is the handler of the user input and output result to the user. It includes InputHandler Class which will deal with user input, and Interface Class which will handle all the console printing interaction. Project team have also store the information of help command inside Interface which will make the help command work when the program is compiled into the jar file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "Both InputHandler and Interface contains only static method, which will be utilize in all the other classes. But the majority of the method call was from the main class, ItLogger."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "## FINDER component"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tototto"
        },
        "content": "![Image of Finder Class Diagram](https://github.com/AY2021S1-TIC4001-3/tp/blob/master/docs/Images/finder.png)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tototto"
        },
        "content": "The FINDER component includes Search and Sort classes. It is used to provide an organised output based on the user desired output selection option."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "Sort class is consist of API to sort the issuelist in given request with quick sort algorithm. It is called from view command with addon keyword to view the sorted list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "//todo STORAGE component"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "## IssueList component"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "The IssueList component is the container to save the data of defects during execution of program. It consist two classes, IssueList and Defects. Issuelist has a vector to store defects.  And the Defect class is the class of defects as what we defined. It contains the defect name, status, severity,date raised, deadline and owner."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "The IssueList component:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "* Able to interact with Storage component and load existing issues"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "* Able to add new defects and store it in the instance of IssueList class"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "* Able to delete existing defects that stored in the instance of IssueList class"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "* Able to get defects that stored in the instaance of IssueList class"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "* Able to get the whole IssueList itself "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "* Able to set/get all details of any specified defect"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "![Image of IssueListComponentClassDiagram](https://github.com/AY2021S1-TIC4001-3/tp/blob/master/docs/Images/IssueListComponent.png)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "## COMMONS component"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "The commons component are those classes used by multiple components are in the program, such as enum classes and the parser class."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "The parser class is mainly in charge of parse user\u0027s input and convert them to a workable format to the program. The enum classes are used to strict the keywords. "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "## Implementation"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "// take one user story as example to showcase how certain features are implemented. "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tototto"
        },
        "content": "Search Implementation"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tototto"
        },
        "content": "The ```search``` feature displays all items in the the ItLogger. It is facillated by the Search Class which comprises of the following implementation:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tototto"
        },
        "content": "1. ```Search#searchTitle``` - searches all Issue in the ItLogger by title listed"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tototto"
        },
        "content": "2. ```Search#searchStatus``` - searches all Issue in the ItLogger by status listed"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tototto"
        },
        "content": "3. ```Search#searchSeverity``` - searches all Issue in the ItLogger by severity listed"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tototto"
        },
        "content": "4. ```Search#searchDeadline``` - searches all Issue in the ItLogger by deadline listed"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tototto"
        },
        "content": "5. ```Search#searchOwner``` - searches all Issue in the ItLogger by owner listed"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tototto"
        },
        "content": "The following sequence diagram shows how the undo operation works."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tototto"
        },
        "content": "##### Design consideration:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tototto"
        },
        "content": "Aspect: Search can otherwise be implemented"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tototto"
        },
        "content": "###### Alternative 1 (current choice): Allow user to search returning result in the order they are stored."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tototto"
        },
        "content": "Pros: Easy to implement."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tototto"
        },
        "content": "Cons: Less relevant result to user"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tototto"
        },
        "content": "###### Alternative 2: Allow user to sort the search e.g. by Alphabetical order."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tototto"
        },
        "content": "Pros: More relevant result to user"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tototto"
        },
        "content": "Cons: more difficult to implement."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "## Product scope"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "* Is a developer, tester or member of the project team."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "* prefer desktop apps over other types."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "* can type fast."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "* prefers typing to mouse interactions."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "* is reasonably comfortable using CLI apps."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "manage defects faster than a typical mouse/GUI driven app. Allows the user to better manage the project issues."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "## User Stories"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|Priority| As a … | I want to … | So that I can… |"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|* * * |new user|add issues into IT logger|track my issues|"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "|* * * |New user|view an issue that is based on the ticket number|see its progress.|"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|* * * |New user|delete a defect|remove defects that are resolved or no longer required|"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "|* * * |New user|list all issues currently in the ITLogger|find all of the recorded issues currently in ITLogger.|"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|* * |New user|I would like a given issue format|so that I can know a structured way of using the app|"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|* |New user|I would like the issue I logged to be date stamped|so that I know when it was raised|"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|* * * |User|be able to load defects from a text file or database|View and track all defects previously recorded in the system|"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|* * * |User|Have a help guide|View the usage of the app|"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|* * * |User|Update information of existing defects|Keep track of those defects that have changed|"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|* * |user|Search defects based on my preference|Narrow down the search result based on what i want to look up|"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|* * * |User|Automatically save my records when the defect list has been changed|progression will not be lost|"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|* * |User|View my defect in a sorted order|More easily track my list of items|"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|* * * |Forgetful user|Be notified of my task that are due|Not forget what i need to fix and close|"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|* * * |User|Have a robust app|So that my data integrity is maintained (e.g. no deletion, cannot reopen after close)|"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "## Non-Functional Requirements"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "* Should work on any mainstream OS as long as it has Java 11 or above installed."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "* Should be able to hold up to 1000 defects without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "* A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "* Should load from and save to from a text files"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tototto"
        },
        "content": "* *Mainstream OS:* Windows, Linux, Unix, OS-X."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for manual testing"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "![Image of UpdateSequenceDiagram](https://github.com/AY2021S1-TIC4001-3/tp/blob/master/docs/Images/updateSequenceDiagram.png)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ZhengShijieNUS": 36,
      "tototto": 48,
      "-": 25,
      "pigoliver": 31
    }
  },
  {
    "path": "docs/Images/ImageReadMe.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "readme"
      }
    ],
    "authorContributionMap": {
      "ZhengShijieNUS": 1
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "IT Logger is a desktop app for managing program issues, and tracking issue resolution progression via a Command Line Interface (CLI)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "1. Ensure you have Java 11 or above installed in your Computer."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "2. Download the latest ITlogger.jar."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "3. Copy the file to the folder you want to use as the home folder for your IT Logger."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "4. Open the program which should appear in the command prompt with java -jar [Directory of the ITlogger.jar file]."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|Action| Command Summary|"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|--------|----------|"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|view | View the issue that is stated with Ticket Number.|"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "|add  | Adding a new issue.|"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "|update |Update an existing issue.|"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|list |Listing all issues in selected requirement|"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|search |Search the issue with conditions|"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|delete |Delete an issue that is stated with Ticket Number|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|help |Display the Help Guide|"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|exit |Exit the ITlogger program|"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|Nil. Not required. If text file itLogger.txt is found, it will preload. |Load issues from text files when program starts|"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "|exit|Save issues to itLogger.txt when program exits. If none exists, it will create one.|"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "### Command Summary"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|Action|Format, Examples|"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|--------|----------|"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|add|add t/TITLE s/STATUS sv/SEVERITY dl/DEADLINE o/OWNER\u003cbr\u003eE.g. add t/cannot submit s/assigned sv/1 dl/20-10-2020 o/Jack |"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|update|Update procedure and cmd format:\u003cbr\u003eUsing the following cmd to enter updating mode:\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;update u/1\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;update u/0 \u003cbr\u003eUpdate the content with the following format: \u003cbr\u003eupdate t/ExampleTitle\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;update sv/2\u003cbr\u003eupdate s/assigned\u003cbr\u003eupdate o/Peter\u003cbr\u003eOnce finish updating, using:\u003cbr\u003e\u0026nbsp;\u0026nbsp;\u0026nbsp;\u0026nbsp;update e/exit \u003cbr\u003eto exit update|"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|view|view v/TICKET\u003cbr\u003eE.g. view v/13451|"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|delete|delete d/TICKET\u003cbr\u003eE.g. delete d/32231|"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|list|list\u003cbr\u003elist sv/a\u003cbr\u003elist sv/d\u003cbr\u003elist dl/a\u003cbr\u003elist dl/d\u003cbr\u003elist dr/a\u003cbr\u003elist dr/d|"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|help|help|"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|search|search /title /\u003ctitle\u003e\u003cbr\u003esearch /status /\u003cstatus\u003e\u003cbr\u003esearch /severity /\u003cseverityNum\u003e\u003cbr\u003esearch /owner /\u003cowner\u003e\u003cbr\u003esearch /deadline /\u003cdeadlineDateString(dd-MM-yyyy)\u003e|"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|exit|exit|"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tototto"
        },
        "content": "**A**: {your answer here}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tototto"
        },
        "content": "{Give a \u0027cheat sheet\u0027 of commands here}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* Add todo `todo n/TODO_NAME d/DEADLINE`"
      }
    ],
    "authorContributionMap": {
      "ZhengShijieNUS": 2,
      "tototto": 2,
      "-": 27,
      "JanuariusJang": 1,
      "pigoliver": 25
    }
  },
  {
    "path": "docs/help.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pigoliver"
        },
        "content": " ____        _"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|  _ \\ _   _| | _____"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "|____/ \\__,_|_|\\_\\___|"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "ITLogger"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "Introduction:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "This is a logging software which allows tracking of software issues \u0026 assign them to the development team."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "Usage:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "  help"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    -- Print out help information"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "  exit"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    -- Exit from the program"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "  add t/\u003cTITLE\u003e s/\u003cSTATUS\u003e sv/\u003cSEVERITY in integer from 0 to 10\u003e dl/\u003cDEADLINE in dd-mm-yyyy format\u003e o/\u003cOWNER\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    -- Add a defect into the list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "  view v/\u003cTICKET in integer\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    -- View a defect which is indicated"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "  delete d/\u003cTICKET in integer\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    -- Delete a defect which is indicated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "  list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    -- List all defects in the list"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "  list sv/a"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    -- List all defects in the list in ascending severity order"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "  list sv/d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    -- List all defects in the list in descending severity order"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "  list dl/a"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    -- List all defects in the list in ascending deadline order"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "  list dl/d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    -- List all defects in the list in descending deadline order"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "  list dr/a"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    -- List all defects in the list in ascending date raised order"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "  list dl/d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    -- List all defects in the list in descending date raised order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "  update u/\u003cTICKET in integer\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    -- Go into update mode for a defect which is indicated"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "  update t/\u003cNEW TITLE\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    -- When in update mode, update the title of the defect"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "  update sv/\u003cNEW SEVERITY in integer from 0 to 10\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    -- When in update mode, update the severity of the defect"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "  search /title /\u003ctitle\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    -- Search the defects match the \u003ctitle\u003e in the issue list"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "  search /status /\u003cstatus\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    -- Search the defects match the \u003cstatus\u003e in the issue list"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "  search /severity /\u003cseverityNum\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    -- Search the defects match the \u003cseverityNum\u003e in the issue list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "  search /owner /\u003cowner\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    -- Search the defects match the \u003cowner\u003e in the issue list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "  search /deadline /\u003cdeadlineDateString(dd-MM-yyyy)\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    -- Search the defects match the \u003cdeadline\u003e in the issue list"
      }
    ],
    "authorContributionMap": {
      "pigoliver": 70
    }
  },
  {
    "path": "docs/team/pigoliver.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "# Hong Jiancheng - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "IT Logger is a desktop app for managing program issues, and tracking issue resolution progression via a Command Line Interface (CLI)."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "### Summary of Contributions"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "#### Contributed Features:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "* Created Parser Class which will parse the user input into respective keywords"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "* Created Add command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "* Created Help command"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "* Created Sort Class and enhanced the View command with sort functionality."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "#### Contributed Documentation:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "* Discuss documentation with teammates"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "* Help in transferring googledoc dollaborative work into Github"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "### Code contributed: "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "* [Link to RepoSense](https://nus-tic4001-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dpigoliver\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other \"Jiancheng\u0027s code on tP Code Dashboard\")"
      }
    ],
    "authorContributionMap": {
      "pigoliver": 17
    }
  },
  {
    "path": "docs/team/tayjunwen.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tototto"
        },
        "content": "# Tay Jun Wen - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tototto"
        },
        "content": "## Objectives"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tototto"
        },
        "content": "A software Engineering project focusing on the implementation of a Green Field Project with an empahsis on Team work with different team members that adopts a software iterative approach to development. This software underwent 3 iteration during its development."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tototto"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tototto"
        },
        "content": "### Project: IT logger"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tototto"
        },
        "content": "Developed using JAVA, IT Logger is a desktop app for managing software issues during development and production. It is used for tracking issue resolution from defect inception till resolution via a Command Line Interface (CLI)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tototto"
        },
        "content": "It can be used for managing the Quality Control (QC) of different project during its SDLC."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tototto"
        },
        "content": "It has features similar to most defect tracking softwares such as JIRA \u0026 HP ALM."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tototto"
        },
        "content": "The project is built based on the User Story collected."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tototto"
        },
        "content": "### Code Contributed"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tototto"
        },
        "content": "https://nus-tic4001-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dtototto\u0026tabRepo\u003dAY2021S1-TIC4001-3%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tototto"
        },
        "content": "### Enhancements implemented:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tototto"
        },
        "content": "Implemented the following function:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tototto"
        },
        "content": "|Action|Format, Examples|"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tototto"
        },
        "content": "|--------|----------|"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tototto"
        },
        "content": "| list | ```list``` |"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tototto"
        },
        "content": "| Search| ```search /title /\u003ctitle\u003e``` \u003cbr\u003e ```search /status /\u003cstatus\u003e``` \u003cbr\u003e``` search /severity /\u003cseverityNum\u003e``` \u003cbr\u003e ```search /owner /\u003cowner\u003e ```\u003cbr\u003e ```search /deadline /\u003cdeadlineDateString(dd-MM-yyyy)\u003e``` |"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tototto"
        },
        "content": "  "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tototto"
        },
        "content": " The ```list``` function was created to allow different users to view the total list of defects present in the IT Logger"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tototto"
        },
        "content": " It was subsequently enhanced to perform listing based on different types \u0026 category such as severity, deadline and etc. It is a must have feature in for usage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tototto"
        },
        "content": " "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tototto"
        },
        "content": " The ```search``` function was created to allow users to look up all defects present in the IT Logger that meets certain search criteria. The list of which can be found   above."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tototto"
        },
        "content": "### Contributions to documentation:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tototto"
        },
        "content": "##### User Guide:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tototto"
        },
        "content": "Assisted to produce the Feature \u0026 Command Summary Section."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tototto"
        },
        "content": "Also Collaborated \u0026 Worked together with the team on the remaining parts of the UG. Jiancheng consolidated the submission to teams repo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tototto"
        },
        "content": "##### Contributions to the Developer Guide:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tototto"
        },
        "content": "Assisted to upload members UML object diagram\u0027s, created description for the developer guide and created Class diagram to illustrate program for ```UI``` and ```Finder``` component."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tototto"
        },
        "content": "Also Collaborated \u0026 Collaborated \u0026 Worked together with the team for the rest of the items. Jiancheng consolidated the remaning submission to teams repo."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tototto"
        },
        "content": "### Contributions to team-based tasks :"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tototto"
        },
        "content": " 1. Setup the Repo in preparation for the project (e.g. creating the Repo, implementing Repo security setup, etc)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tototto"
        },
        "content": " 2. Advising and reminding team to utilise project tools such as style guide checker to avoid Continuous Integration failure."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tototto"
        },
        "content": " 3. Setting up of Team mile stone, creating incidents and moving User stories into them for easy tracking"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tototto"
        },
        "content": " 4. Perform basic manual testing during early stages of development. Raised bugs and issues."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tototto"
        },
        "content": " 5. Contributed ideas during discussions in weekly meetings."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tototto"
        },
        "content": " 6. Set forward each iteration task and planning to ensure smooth project progress."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tototto"
        },
        "content": " 7. Perform code enhancement for Logging and Assertion."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tototto"
        },
        "content": " 8. Assist to create the setup of additional Junit Testcases."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tototto"
        },
        "content": "### Review/mentoring contributions: "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tototto"
        },
        "content": "Assisted team members to resolve technical issue and provided articles to assist in their problem resolution within Team\u0027s internal chat."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tototto"
        },
        "content": "### Contributions beyond the project team:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tototto"
        },
        "content": "Motivated the team during weekly discussion by discussing about matters outside of project work to build and consolidate bond. Kept relationship healthy."
      }
    ],
    "authorContributionMap": {
      "tototto": 67
    }
  },
  {
    "path": "docs/team/zhengshijienus.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "# Zheng Shijie - Project Portfolio Page"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "## Team Project: ItLogger"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "IT Logger is a desktop app for managing program issues, and tracking issue resolution progression via a Command Line Interface (CLI)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "## Summary of Contributions"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "### New Feature"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "* Added the ability to Update defects commands."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "  * What it does: allows the user to update any existing defects at a time. This command will allow user to enter updating mode to update a defect and exit until user use “update e/exit” command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "  * Justification: This feature improves the product significantly because the any part(deadline, owner, severity etc.) of an defect might be changed. The program shall provide a function to allow user update them accordingly."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "  * Highlights: This enhancement doesn’t affects existing command and data structures. It works like a individual function. The implementation achieves decoupling target."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "* Added the ability to View defects command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "  * What it does: allows user to view the details of a specific defect in the defect list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": " "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "### Code contributed: "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "* https://nus-tic4001-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003d\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dtrue\u0026tabType\u003dauthorship\u0026tabAuthor\u003dZhengShijieNUS\u0026tabRepo\u003dAY2021S1-TIC4001-3%2Ftp%5Bmaster%5D\u0026authorshipIsMergeGroup\u003dfalse\u0026authorshipFileTypes\u003ddocs~functional-code~test-code~other"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "### Enhancements to existing features:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "* Upgrade the date format, force to be represented in English and make it compliant with different language system(such as Chinese system) (Pull requests #38)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "* Wrote additional tests for existing features to increase coverage (Pull requests #31)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "* Added additional parse function to parse commands(Pull requests #38)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "### Documentation:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "* User Guide:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "  * Work together with all teammates. And one of us (Jiancheng) is in charge of submission to teams repo."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "  "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "* Developer Guide: "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "  * Work together with all teammates. And one of us (Jiancheng) is in charge of submission to teams repo."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": " "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": " ### Community: "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": " "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": " * PRs reviewed: #7, #31, #38, #53, #55"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": " * Contributed ideas to discussions during weekly meetings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": " * Reported bugs and suggestions to others codes.(example: DATE format is not compatible with Chinese environmental system issue )"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": " "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": " ### Contribution to DG:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": " "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": " * Generate Architecture class diagram"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": " * Generate IssueList component diagram"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": " * In charge of description of IssueList component and Common component"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": " * Generate Update sequence diagram and View sequence diagram"
      }
    ],
    "authorContributionMap": {
      "ZhengShijieNUS": 51
    }
  },
  {
    "path": "itlogger.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "t/cannot see s/new sv/9 dl/30-10-2020 o/JC"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "t/cannot login s/assigned sv/1 dl/20-10-2020 o/John"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "t/cannot submit s/assigned sv/1 dl/20-10-2020 o/Jack"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "t/cannot view Tasks s/assigned sv/1 dl/20-10-2020 o/John"
      }
    ],
    "authorContributionMap": {
      "JanuariusJang": 2,
      "pigoliver": 2
    }
  },
  {
    "path": "src/main/java/seedu/itlogger/Defect.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tototto"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.Handler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tototto"
        },
        "content": "public class Defect {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tototto"
        },
        "content": "    String title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tototto"
        },
        "content": "    String status;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tototto"
        },
        "content": "    int severity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tototto"
        },
        "content": "    Date dateRaised;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tototto"
        },
        "content": "    Date deadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tototto"
        },
        "content": "    String owner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public String getTitle() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public void setTitle(String title) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public String getStatus() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public void setStatus(String status) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public int getSeverity() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        return severity;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public void setSeverity(int severity) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        this.severity \u003d severity;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public Date getDeadline() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        return deadline;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public void setDeadline(Date deadline) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public String getOwner() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        return owner;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public void setOwner(String owner) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        this.owner \u003d owner;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tototto"
        },
        "content": "    // Creating logger"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tototto"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Defect.class.getName());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public Defect(String title, String status, int severity, Date deadline, String owner) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tototto"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tototto"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tototto"
        },
        "content": "        this.severity \u003d severity;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        this.dateRaised \u003d Date.from(Instant.now());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tototto"
        },
        "content": "        this.deadline \u003d deadline;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tototto"
        },
        "content": "        this.owner \u003d owner;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assert this.title !\u003d null : \"title cannot be empty\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assert this.status !\u003d null : \"status cannot be empty\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assert this.severity \u003e 0 : \"severity cannot be 0\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assert this.dateRaised !\u003d null : \"dateRaised cannot be empty\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assert this.deadline !\u003d null : \"deadline cannot be empty\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assert this.owner !\u003d null : \"owner cannot be empty\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tototto"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tototto"
        },
        "content": "            setupLogger();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tototto"
        },
        "content": "            logger.info(\"created defect Object successfully\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tototto"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tototto"
        },
        "content": "            System.out.println(\"Issue creating Log file\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tototto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tototto"
        },
        "content": "    /** Setup Logger for Defect class."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tototto"
        },
        "content": "     * @throws IOException unable to create file"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tototto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public static void setupLogger() throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tototto"
        },
        "content": "        // Remove the default console handler"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Logger parentLogger \u003d Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Handler[] handlers \u003d parentLogger.getHandlers();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tototto"
        },
        "content": "        for (Handler handler : handlers) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tototto"
        },
        "content": "            parentLogger.removeHandler(handler);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tototto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Handler fh \u003d new FileHandler(\"Defect.log\", true);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tototto"
        },
        "content": "        fh.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.addHandler(fh);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.setLevel(Level.FINE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * toString method will convert Defect object into String"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * to print out."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @return String to print out for this Defect"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"MMM dd yyyy\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tototto"
        },
        "content": "        String strRep \u003d  \"Title: \" + title + System.lineSeparator()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                        + \"Status: \" + status + System.lineSeparator()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                        + \"Severity: Level \" + severity + System.lineSeparator()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                        + \"Date Raised: \" + dateFormat.format(dateRaised) + System.lineSeparator()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                        + \"Deadline: \" + dateFormat.format(deadline) + System.lineSeparator()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                        + \"Owner: \" + owner;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.info(\"printing object to string\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assert strRep !\u003d null : \"String representation of Defect cannot be empty\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tototto"
        },
        "content": "        return strRep;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tototto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhengShijieNUS": 42,
      "tototto": 65,
      "pigoliver": 17
    }
  },
  {
    "path": "src/main/java/seedu/itlogger/InputHandler.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tototto"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.Handler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tototto"
        },
        "content": "public class InputHandler {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tototto"
        },
        "content": "    // Creating logger for InputHandler"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tototto"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(InputHandler.class.getName());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    private static Scanner inputStream \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public InputHandler() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tototto"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tototto"
        },
        "content": "            setupLogger();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tototto"
        },
        "content": "            logger.info(\"created InputHandler object successfully\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tototto"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tototto"
        },
        "content": "            System.out.println(\"Issue creating Log file\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tototto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public static void setupLogger() throws IOException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tototto"
        },
        "content": "        // Remove the default console handler"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Logger parentLogger \u003d Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Handler[] handlers \u003d parentLogger.getHandlers();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tototto"
        },
        "content": "        for (Handler handler : handlers) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tototto"
        },
        "content": "            parentLogger.removeHandler(handler);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tototto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Handler fh \u003d new FileHandler(\"InputHandler.log\", true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tototto"
        },
        "content": "        fh.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.addHandler(fh);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.setLevel(Level.FINE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static String getInput() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.info(\"getting user input\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tototto"
        },
        "content": "        return inputStream.nextLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static boolean hasNextLine() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.info(\"checking if have inputStream has next line\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return inputStream.hasNextLine();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tototto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tototto": 43,
      "pigoliver": 6
    }
  },
  {
    "path": "src/main/java/seedu/itlogger/Interface.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tototto"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.io.InputStreamReader;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.Vector;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tototto"
        },
        "content": "public class Interface {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(InputHandler.class.getName());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    private static String LOGO \u003d  \" ____        _\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tototto"
        },
        "content": "                                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tototto"
        },
        "content": "                                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tototto"
        },
        "content": "                                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tototto"
        },
        "content": "                                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    private static String ASK_NAME \u003d \"What is your name?\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    private static String GREETING_MSG \u003d \"Hello \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    private static String PROGRAM_OPENING \u003d \"What would you like to do?\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tototto"
        },
        "content": "    private static String EMPTY_ERROR_MSG \u003d \"There are no items now\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tototto"
        },
        "content": "    private static String KEYWORD_ISSUE \u003d \"Keyword does not exists\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    private static String UPDATECONTENT_MSG \u003d \"Please specify the updating content. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            + \"Enter \\\"update e/exit\\\" to exit updating status.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    private static String HELP_MSG \u003d \"ITLogger\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"Introduction:\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"This is a logging software which allows tracking\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \" of software issues \u0026 assign them to the development team.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"Usage:\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"  help\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    -- Print out help information\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"  exit\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    -- Exit from the program\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"  add t/\u003cTITLE\u003e s/\u003cSTATUS\u003e sv/\u003cSEVERITY in integer from 0 to 10\u003e\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \" dl/\u003cDEADLINE in dd-mm-yyyy format\u003e o/\u003cOWNER\u003e\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    -- Add a defect into the list\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"  view v/\u003cTICKET in integer\u003e\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    -- View a defect which is indicated\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"  delete d/\u003cTICKET in integer\u003e\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    -- Delete a defect which is indicated\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"  list\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    -- List all defects in the list\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    \\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"  list sv/a\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    -- List all defects in the list in ascending severity order\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"  list sv/d\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    -- List all defects in the list in descending severity order\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    \\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"  list dl/a\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    -- List all defects in the list in ascending deadline order\\n\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    \\n\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"  list dl/d\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    -- List all defects in the list in descending deadline order\\n\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    \\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"  list dr/a\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    -- List all defects in the list in ascending date raised order\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    \\n\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"  list dl/d\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    -- List all defects in the list in descending date raised order\\n\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    \\n\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"  update u/\u003cTICKET in integer\u003e\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    -- Go into update mode for a defect which is indicated\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"  update t/\u003cNEW TITLE\u003e\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    -- When in update mode, update the title of the defect\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"  update sv/\u003cNEW SEVERITY in integer from 0 to 10\u003e\\n\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    -- When in update mode, update the severity of the defect\\n\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    \\n\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"  search /title /\u003ctitle\u003e\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    -- Search the defects match the \u003ctitle\u003e in the issue list\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    \\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"  search /status /\u003cstatus\u003e\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    -- Search the defects match the \u003cstatus\u003e in the issue list\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    \\n\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"  search /severity /\u003cseverityNum\u003e\\n\""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    -- Search the defects match the \u003cseverityNum\u003e in the issue list\\n\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    \\n\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"  search /owner /\u003cowner\u003e\\n\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    -- Search the defects match the \u003cowner\u003e in the issue list\\n\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    \\n\""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"  search /deadline /\u003cdeadlineDateString(dd-MM-yyyy)\u003e\\n\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            + \"    -- Search the defects match the \u003cdeadline\u003e in the issue list\\n\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public static void printUpdateContent() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        System.out.println(UPDATECONTENT_MSG);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static void printLogo() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tototto"
        },
        "content": "        System.out.println(LOGO);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static void askName() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tototto"
        },
        "content": "        System.out.println(ASK_NAME);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static void greeter(String name) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        System.out.println(GREETING_MSG + name);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static void programOpening() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tototto"
        },
        "content": "        System.out.println(PROGRAM_OPENING);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public static void keyWordIssue() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tototto"
        },
        "content": "        System.out.println(KEYWORD_ISSUE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public static void displayIssues(Vector toBeDisplayed) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Iterator iter \u003d toBeDisplayed.iterator();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tototto"
        },
        "content": "        while (iter.hasNext()) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tototto"
        },
        "content": "            Defect issue \u003d (Defect) iter.next();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tototto"
        },
        "content": "            System.out.println(issue + System.lineSeparator());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tototto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static void printFileToUser() throws IOException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        printLogo();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        System.out.println(HELP_MSG);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static void printErrorMessageToUser(Exception errorMessage) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        System.out.println(\"ERROR: \" + errorMessage);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public static void emptyErrorMsg() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tototto"
        },
        "content": "        System.out.println(EMPTY_ERROR_MSG);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tototto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhengShijieNUS": 6,
      "tototto": 41,
      "pigoliver": 92
    }
  },
  {
    "path": "src/main/java/seedu/itlogger/IssueList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tototto"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.Vector;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.Handler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tototto"
        },
        "content": "public class IssueList {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tototto"
        },
        "content": "    // Creating Logger for IssueList"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tototto"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(IssueList.class.getName());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    private Vector\u003cDefect\u003e issueList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public IssueList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        issueList \u003d new Vector\u003c\u003e();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assert issueList !\u003d null : \"issueList should not be null after creation\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tototto"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tototto"
        },
        "content": "            setupLogger();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tototto"
        },
        "content": "            logger.info(\"created IssueList Object successfully\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tototto"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tototto"
        },
        "content": "            System.out.println(\"Issue creating Log file\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tototto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public static void setupLogger() throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tototto"
        },
        "content": "        // Remove the default console handler"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Logger parentLogger \u003d Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Handler[] handlers \u003d parentLogger.getHandlers();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tototto"
        },
        "content": "        for (Handler handler : handlers) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tototto"
        },
        "content": "            parentLogger.removeHandler(handler);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tototto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Handler fh \u003d new FileHandler(\"IssueList.log\", true);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tototto"
        },
        "content": "        fh.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.addHandler(fh);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.setLevel(Level.FINE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public Vector\u003cDefect\u003e getIssue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.info(\"fetching all issues from issueList...\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assert issueList !\u003d null : \"issueList returned should not be null\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tototto"
        },
        "content": "        return issueList;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    public void loadIssues(Vector\u003cDefect\u003e defectsList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        issueList.addAll(defectsList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public void addIssue(Defect defect) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.info(\"adding an issue to issueList...\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tototto"
        },
        "content": "        issueList.add(defect);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assert issueList.size() \u003e 0 : \"issueList should not be empty\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public void deleteIssue(int index) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.info(\"deleting an issue from issueList...\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tototto"
        },
        "content": "        issueList.remove(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public Defect getDefect(int index) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.info(\"extracting an issue in issueList...\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assert issueList.get(index) !\u003d null : \"defect \" + index + \" retrieved should not be null\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        return issueList.get(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.info(\"getting total number of issues in issueList...\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assert issueList.size() \u003e\u003d 0 : \"issueList should be at least 0 size large\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        return issueList.size();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tototto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhengShijieNUS": 4,
      "tototto": 60,
      "JanuariusJang": 9,
      "pigoliver": 3
    }
  },
  {
    "path": "src/main/java/seedu/itlogger/ItLogger.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tototto"
        },
        "content": "import seedu.itlogger.exception.EmptyListException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "import seedu.itlogger.storage.StorageFile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.Vector;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.Handler;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import static seedu.itlogger.InputHandler.getInput;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import static seedu.itlogger.InputHandler.hasNextLine;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import static seedu.itlogger.Interface.printFileToUser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Interface.printErrorMessageToUser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Interface.printLogo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Interface.programOpening;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import static seedu.itlogger.Interface.askName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import static seedu.itlogger.Interface.greeter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import static seedu.itlogger.Interface.keyWordIssue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import static seedu.itlogger.Interface.emptyErrorMsg;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import static seedu.itlogger.Interface.displayIssues;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseDeadline;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseKeyWord;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseOwner;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseSearchTerm;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseSearchType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseSeverity;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseStatus;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseTitle;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Search.searchDeadline;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Search.searchOwner;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Search.searchSeverity;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Search.searchStatus;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Search.searchTitle;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import static seedu.itlogger.Parser.parseListType;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import static seedu.itlogger.SortList.sortList;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "public class ItLogger {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tototto"
        },
        "content": "    /**."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tototto"
        },
        "content": "     * Logger for Main Class"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tototto"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tototto"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(ItLogger.class.getName());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    private static StorageFile storage \u003d new StorageFile();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * Main entry-point for the java.duke.Duke application."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tototto"
        },
        "content": "        // Logger setup:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tototto"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tototto"
        },
        "content": "            // Remove the default console handler"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tototto"
        },
        "content": "            Logger parentLogger \u003d Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tototto"
        },
        "content": "            Handler[] handlers \u003d parentLogger.getHandlers();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tototto"
        },
        "content": "            for (Handler handler : handlers) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tototto"
        },
        "content": "                parentLogger.removeHandler(handler);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tototto"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tototto"
        },
        "content": "            Handler fh \u003d new FileHandler(\"ItLogger.log\", true);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tototto"
        },
        "content": "            fh.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tototto"
        },
        "content": "            logger.addHandler(fh);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tototto"
        },
        "content": "            logger.setLevel(Level.FINE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tototto"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tototto"
        },
        "content": "            System.out.println(\"Issue creating Log file\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tototto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tototto"
        },
        "content": "        // Instantiating InputHandler only for logging purpose"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tototto"
        },
        "content": "        InputHandler inputHandler \u003d new InputHandler();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tototto"
        },
        "content": "        // Program starting point:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        IssueList issueList \u003d new IssueList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assert issueList !\u003d null : \"issueList should have been created\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "            storage.load(issueList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        } catch (StorageFile.StorageOperationException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "            Interface.printErrorMessageToUser(e);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        } //catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        //System.out.println(\"File not found. No Tasks preloaded.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        //}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.info(\"Creating ITLogger issue list...\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        printLogo();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        askName();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String userName \u003d \"\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        if (hasNextLine()) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tototto"
        },
        "content": "            logger.info(\"Getting username from user...\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            userName \u003d getInput();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tototto"
        },
        "content": "            logger.fine(\"completed the obtaining of username...\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            assert !userName.equals(\"\") : \"username should have been captured. Should not be empty\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            assert !userName.equals(null)  : \"username should have been captured. Should not be null\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        greeter(userName);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        boolean keepRun \u003d true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        while (keepRun) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tototto"
        },
        "content": "            logger.info(\"Beginning program run...\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            programOpening();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            String input \u003d \"\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            if (hasNextLine()) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tototto"
        },
        "content": "                logger.info(\"getting instruction for program...\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                input \u003d getInput();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tototto"
        },
        "content": "                logger.info(\"finished getting instruction for program...\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                assert !input.equals(\"\") : \"input should have been captured. Should not be empty\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            KeyWord command \u003d KeyWord.OTHERS;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tototto"
        },
        "content": "                command \u003d parseKeyWord(input.toUpperCase());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tototto"
        },
        "content": "                logger.config(\"updated config for ItLogger command\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tototto"
        },
        "content": "                assert command !\u003d KeyWord.OTHERS : \"proper keyword should be captured\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tototto"
        },
        "content": "                keyWordIssue();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tototto"
        },
        "content": "                logger.log(Level.WARNING, \"Non-existent keyword was captured! error is: \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tototto"
        },
        "content": "            //todo -\u003e build PARSER"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            switch (command) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            case ADD: // Jian Cheng"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                // todo -\u003e add Defect"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                logger.info(\"Performing adding operation for ItLogger, add a new defect...\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    Defect newIssue \u003d new Defect(parseTitle(input), parseStatus(input),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                                        parseSeverity(input), parseDeadline(input), parseOwner(input));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    //System.out.println(test.toString());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    assert newIssue !\u003d null : \"Issue in creating new issue\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    issueList.addIssue(newIssue);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                } catch (ParseException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    printErrorMessageToUser(e);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    logger.log(Level.WARNING, \"Issue in parsing command: \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            case UPDATE: // Shijie"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                logger.info(\"Performing updating operation for ItLogger, update an existing defect...\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                    Defect defect \u003d issueList.getDefect(parseIndex(input,issueList.getSize()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                    boolean isExit \u003d false;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                    do {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                        String updateCommandContent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                        System.out.println(\"You are modifying:\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                        System.out.println(defect.toString());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                        Interface.printUpdateContent();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                        if (hasNextLine()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                            updateCommandContent \u003d getInput();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                            isExit \u003d Parser.parseUpdateContent(updateCommandContent,defect);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                    } while (isExit);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                } catch (ParseException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                    printErrorMessageToUser(e);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                    logger.log(Level.WARNING, \"Issue in parsing command: \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                    printErrorMessageToUser(e);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                    logger.log(Level.WARNING, \"Update occurs unknown error: \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            case VIEW: // Shi Jie"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                // todo -\u003e view ONE Defect with INDEX NUMBER"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                logger.info(\"Performing view operation for ItLogger, viewing specific defect...\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    System.out.println(issueList.getDefect(parseIndex(input,issueList.getSize())).toString());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                    logger.info(\"Obtained the specific defect...\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    int indexOfDefect \u003d parseIndex(input,issueList.getSize());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                    assert indexOfDefect \u003e\u003d 0 : \"Viewing index shall non-negative\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                    System.out.println(issueList.getDefect(indexOfDefect).toString());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                    logger.info(\"Finished obtaining the specific defect...\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                    logger.log(Level.WARNING,\"Problem viewing defect. error is: \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                    System.out.println(\"Please check the index value and also the correct format: \""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                            + \"VIEW /index. Eg:VIEW /1\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            case DELETE: // Jang"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                // todo -\u003e delete ONE Defect using INDEX NUMBER"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                logger.info(\"Begin deleting a specific Defect...\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    int indexDeletion \u003d parseIndex(input,issueList.getSize());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                    assert indexDeletion \u003e\u003d 0 : \"Deletion index must be non-negative\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                    assert indexDeletion \u003c\u003d issueList.getSize() : \"Deletion index must \""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                            + \"be equal or lesser than array size\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    issueList.deleteIssue(indexDeletion);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                    logger.info(\"Deletion of Defect successful\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                    logger.log(Level.WARNING, \"Pls check your index values. It is \""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                            + \"either greater than the largest value or a negative value.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                } catch (Exception e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                    System.out.println(e.getMessage());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                    logger.log(Level.WARNING, \"Some error have occurred. \""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                            + \"You must have entered an invalid index\" + e.getMessage());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            case LIST:  // Jun Wen"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                // todo -\u003e list ALL avaliable Defect in Issue List"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tototto"
        },
        "content": "                logger.info(\"Performing listing operation for ItLogger, showing all defect...\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tototto"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    int listKeyword \u003d 0;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    if (input.contains(\"/\")) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                        listKeyword \u003d parseListType(input);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    Vector toBeDisplayed \u003d sortList(issueList, listKeyword);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tototto"
        },
        "content": "                    logger.info(\"Obtained issueList...\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tototto"
        },
        "content": "                    assert toBeDisplayed !\u003d null : \"IT logger issue list should exists\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "tototto"
        },
        "content": "                    if (toBeDisplayed.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "tototto"
        },
        "content": "                        logger.info(\"Problem displaying empty list...no item to show...\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "tototto"
        },
        "content": "                        assert toBeDisplayed.size() \u003d\u003d 0 : \"IT logger issue list should be empty here\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "tototto"
        },
        "content": "                        throw new EmptyListException(\"The IT Logger Defect list is empty\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "tototto"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "tototto"
        },
        "content": "                        logger.info(\"printing issues\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "tototto"
        },
        "content": "                        assert toBeDisplayed.size() \u003e 0 : \"There should be at least 1 issue to be displayed\";"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "tototto"
        },
        "content": "                        displayIssues(toBeDisplayed);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "tototto"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "tototto"
        },
        "content": "                } catch (EmptyListException e) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "tototto"
        },
        "content": "                    logger.log(Level.WARNING,\"Problem displaying list. error is: \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "tototto"
        },
        "content": "                    emptyErrorMsg();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                } catch (ParseException e) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    logger.log(Level.WARNING,\"Parsing keywords. error is: \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                    emptyErrorMsg();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "tototto"
        },
        "content": "                }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "tototto"
        },
        "content": "            case SEARCH: // Jun Wen"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "tototto"
        },
        "content": "                // todo -\u003e Search (search by title, status, severity, deadline, owner)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "tototto"
        },
        "content": "                String searchBy \u003d parseSearchType(input);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "tototto"
        },
        "content": "                String searchTerm \u003d parseSearchTerm(input);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "tototto"
        },
        "content": "                Vector\u003cDefect\u003e issues \u003d issueList.getIssue();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "tototto"
        },
        "content": "                if (searchBy.equals(\"TITLE\")) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "tototto"
        },
        "content": "                    displayIssues(searchTitle(searchTerm, issues));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "tototto"
        },
        "content": "                } else if (searchBy.equals(\"STATUS\")) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "tototto"
        },
        "content": "                    displayIssues(searchStatus(searchTerm, issues));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "tototto"
        },
        "content": "                } else if (searchBy.equals(\"SEVERITY\")) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tototto"
        },
        "content": "                    displayIssues(searchSeverity(searchTerm, issues));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "tototto"
        },
        "content": "                } else if (searchBy.equals(\"OWNER\")) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tototto"
        },
        "content": "                    displayIssues(searchOwner(searchTerm, issues));"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "tototto"
        },
        "content": "                } else if (searchBy.equals(\"DEADLINE\")) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "tototto"
        },
        "content": "                    try {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "tototto"
        },
        "content": "                        displayIssues(searchDeadline(searchTerm, issues));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "tototto"
        },
        "content": "                    } catch (ParseException e) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "tototto"
        },
        "content": "                        System.out.println(\"Issue parsing date searched\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "tototto"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "tototto"
        },
        "content": "                }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "tototto"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            case HELP:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                logger.info(\"help operation started\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                printFileToUser();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            case EXIT:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                    storage.save(issueList);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                } catch (StorageFile.StorageOperationException e) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                    System.out.println(\"Issue saving file. Exiting Program\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "tototto"
        },
        "content": "                logger.info(\"exiting program\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "tototto"
        },
        "content": "                logger.config(\"updating program config to quit\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                keepRun \u003d false;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "tototto"
        },
        "content": "                logger.warning(\"unknown keyword sent to IT logger as command\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                System.out.println(\"Unknown KeyWord, please try again!\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "tototto"
        },
        "content": "            logger.info(\"completed an iteration of ItLogger logic flow.\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhengShijieNUS": 31,
      "tototto": 116,
      "JanuariusJang": 32,
      "pigoliver": 110
    }
  },
  {
    "path": "src/main/java/seedu/itlogger/KeyWord.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tototto"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tototto"
        },
        "content": "public enum KeyWord {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tototto"
        },
        "content": "    ADD,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    UPDATE,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tototto"
        },
        "content": "    VIEW,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tototto"
        },
        "content": "    DELETE,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    LIST,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    EXIT,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tototto"
        },
        "content": "    SEARCH,"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    HELP,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    OTHERS"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tototto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhengShijieNUS": 1,
      "tototto": 8,
      "pigoliver": 4
    }
  },
  {
    "path": "src/main/java/seedu/itlogger/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tototto"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tototto"
        },
        "content": "// Jian Cheng"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.util.logging.Handler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pigoliver"
        },
        "content": " * This Parser Class handles the String input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pigoliver"
        },
        "content": " * It will parse the string into respective output in"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pigoliver"
        },
        "content": " * correct format and type."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pigoliver"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tototto"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(IssueList.class.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tototto"
        },
        "content": "            // Remove the default console handler"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tototto"
        },
        "content": "            Logger parentLogger \u003d Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tototto"
        },
        "content": "            Handler[] handlers \u003d parentLogger.getHandlers();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tototto"
        },
        "content": "            for (Handler handler : handlers) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tototto"
        },
        "content": "                parentLogger.removeHandler(handler);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tototto"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            Handler fh \u003d new FileHandler(\"Parser.log\", true);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            fh.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            logger.addHandler(fh);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            logger.setLevel(Level.FINE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            logger.info(\"Created Parser Object successfully\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            System.out.println(\"Issue in creating Log file\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * parseKeyWord method will parse the fullInput"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * and get KeyWord from fullInput."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @param fullInput -\u003e user\u0027s full command"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @return keyword provided by user and in KeyWord enum"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static KeyWord parseKeyWord(String fullInput) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        logger.info(\"parsing keyword from user input...\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String possibleKeyWord;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        if (fullInput.contains(\" \")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            possibleKeyWord \u003d fullInput.split(\" \")[0];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            possibleKeyWord \u003d fullInput;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assert possibleKeyWord !\u003d null : \"Empty command found from input\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return KeyWord.valueOf(possibleKeyWord);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * parseInputElement method will parse the input given"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * and return the element as String that is between startNotation"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * and endNotation."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @param input -\u003e input String to parse"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @param startNotation -\u003e notation to start the element"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @param endNotation -\u003e notation to end the element"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @return element that is between start and end notation as String type"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    protected static String parseInputElement(String input, String startNotation, String endNotation) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        logger.info(\"parsing element from index \" + startNotation + \" to \" + endNotation + \" in user input...\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        int elementStartIndex \u003d input.indexOf(startNotation) + startNotation.length();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        int elementEndIndex \u003d input.indexOf(endNotation);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String parsedResult \u003d input.substring(elementStartIndex,elementEndIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assert parsedResult !\u003d \"\" : \"Issue in parsing command\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return parsedResult;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * parseTitle method will parse the fullInput"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * and return Title of Defect for ADD Command."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @param fullInput -\u003e user\u0027s full command"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @return Defect title provided by user and in String type"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static String parseTitle(String fullInput) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        logger.info(\"parsing title from user input...\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String titleStartNotation \u003d \"t/\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String titleEndNotation \u003d \" s/\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return parseInputElement(fullInput,titleStartNotation,titleEndNotation);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * parseStatus method will parse the fullInput"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * and return Status of Defect for ADD Command."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @param fullInput -\u003e user\u0027s full command"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @return Defect status provided by user and in String type"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static String parseStatus(String fullInput) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        logger.info(\"parsing status from user input...\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String statusStartNotation \u003d \"s/\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String statusEndNotation \u003d \" sv/\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return parseInputElement(fullInput,statusStartNotation,statusEndNotation);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * parseSeverity method will parse the fullInput"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * and return Severity of Defect for ADD Command."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @param fullInput -\u003e user\u0027s full command"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @return Defect severity provided by user and in int type"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static int parseSeverity(String fullInput) throws ParseException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        logger.info(\"parsing severity from user input...\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String severityStartNotation \u003d \"sv/\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String severityEndNotation \u003d \" dl/\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String severity \u003d parseInputElement(fullInput,severityStartNotation,severityEndNotation);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        int parsedResult;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            parsedResult \u003d Integer.parseInt(severity);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            throw new ParseException(\"Severity should be integer from 0 to 10\",0);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assert parsedResult \u003c\u003d 10 \u0026\u0026 parsedResult \u003e\u003d 0 : \"Severity should be integer from 0 to 10\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return parsedResult;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * parseDeadline method will parse the fullInput"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * and return Deadline of Defect for ADD Command."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @param fullInput -\u003e user\u0027s full command"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @return Defect deadline provided by user and in Date type"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static Date parseDeadline(String fullInput) throws ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        logger.info(\"parsing deadline from user input...\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String deadlineStartNotation \u003d \"dl/\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String deadlineEndNotation \u003d \" o/\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String deadline \u003d parseInputElement(fullInput,deadlineStartNotation, deadlineEndNotation);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        return new SimpleDateFormat(\"dd-MM-yyyy\", Locale.ENGLISH).parse(deadline);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * parseOwner method will parse the fullInput"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * and return Owner of Defect for ADD Command."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @param fullInput -\u003e user\u0027s full command"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @return Defect owner provided by user and in String type"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static String parseOwner(String fullInput) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        logger.info(\"parsing owner from user input...\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        int ownerStartIndex \u003d fullInput.indexOf(\"o/\") + 2;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String parsedResult \u003d fullInput.substring(ownerStartIndex);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assert parsedResult !\u003d \"\" : \"Issue in parsing command\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return parsedResult;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * parseIndex method will parse the fullInput and return"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * user indicated index for VIEW and DELETE Command."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @param fullInput -\u003e user\u0027s full command"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     * @return Defect index provided by user and in int type"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static int parseIndex(String fullInput, int size) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        logger.info(\"parsing index from user input...\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String possibleIndex \u003d fullInput.split(\"/\")[1];"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        int parsedResult \u003d Integer.parseInt(possibleIndex);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assert parsedResult \u003c\u003d size \u0026\u0026 parsedResult \u003e\u003d 0 : \"Index should be integer from 0 to \" + size;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return parsedResult;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static int parseListType(String fullInput) throws ParseException {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        logger.info(\"parsing view type from user input...\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String possibleListType;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String possibleOrder;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            possibleListType \u003d fullInput.split(\"/\")[0].substring(5);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            possibleOrder \u003d fullInput.split(\"/\")[1];"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            throw new ParseException(\"Command has error.Please check.\",1);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        switch (possibleListType) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        case \"sv\":"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            if (possibleOrder.equals(\"d\")) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                return 2;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                return 1;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        case \"dl\":"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            if (possibleOrder.equals(\"d\")) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                return 4;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                return 3;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        case \"dr\":"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            if (possibleOrder.equals(\"d\")) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                return 6;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                return 5;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public static String parseSearchType(String fullInput) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.info(\"parsing search type from user input...\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "tototto"
        },
        "content": "        String possibleSearchType \u003d fullInput.split(\"/\")[1];"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tototto"
        },
        "content": "        return possibleSearchType.toUpperCase().trim();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public static String parseSearchTerm(String fullInput) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tototto"
        },
        "content": "        logger.info(\"parsing search term from user input...\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "tototto"
        },
        "content": "        String possibleSearchTerm \u003d fullInput.split(\"/\")[2];"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "tototto"
        },
        "content": "        return possibleSearchTerm;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public static boolean parseUpdateContent(String fullInput,Defect defect) throws ParseException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        logger.info(\"parsing UpdateContent from user input...\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        String cmd \u003d \"\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        String content \u003d \"\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            cmd \u003d fullInput.split(\"/\")[0].substring(7);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            content \u003d fullInput.split(\"/\")[1];"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            throw new ParseException(\"Command has error.Please check.\",1);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        switch (cmd) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        case \"t\":"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            defect.setTitle(content);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        case \"s\":"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            defect.setStatus(content);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        case \"sv\":"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            defect.setSeverity(Integer.parseInt(content));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        case \"dl\":"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            defect.setDeadline(new SimpleDateFormat(\"dd-MM-yyyy\", Locale.ENGLISH).parse(content));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        case \"o\":"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            defect.setOwner(content);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        case \"e\":"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "tototto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhengShijieNUS": 35,
      "tototto": 27,
      "pigoliver": 191
    }
  },
  {
    "path": "src/main/java/seedu/itlogger/Search.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tototto"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.Vector;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tototto"
        },
        "content": "public class Search {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public static Vector searchTitle(String searchTerm, Vector\u003cDefect\u003e issueList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Iterator iter \u003d issueList.iterator();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Vector\u003cDefect\u003e result \u003d new Vector\u003cDefect\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tototto"
        },
        "content": "        while (iter.hasNext()) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tototto"
        },
        "content": "            Defect curr \u003d (Defect)iter.next();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tototto"
        },
        "content": "            if (curr.getTitle().contains(searchTerm)) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tototto"
        },
        "content": "                result.add(curr);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tototto"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tototto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tototto"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public static Vector searchStatus(String status, Vector\u003cDefect\u003e issueList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Iterator iter \u003d issueList.iterator();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Vector\u003cDefect\u003e result \u003d new Vector\u003cDefect\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tototto"
        },
        "content": "        while (iter.hasNext()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tototto"
        },
        "content": "            Defect curr \u003d (Defect)iter.next();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tototto"
        },
        "content": "            if (curr.getStatus().contains(status)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tototto"
        },
        "content": "                result.add(curr);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tototto"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tototto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tototto"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public static Vector searchSeverity(String severity, Vector\u003cDefect\u003e issueList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tototto"
        },
        "content": "        int parsedSeverity \u003d Integer.parseInt(severity);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Iterator iter \u003d issueList.iterator();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Vector\u003cDefect\u003e result \u003d new Vector\u003cDefect\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tototto"
        },
        "content": "        while (iter.hasNext()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tototto"
        },
        "content": "            Defect curr \u003d (Defect)iter.next();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tototto"
        },
        "content": "            if (curr.getSeverity() \u003d\u003d parsedSeverity) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tototto"
        },
        "content": "                result.add(curr);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tototto"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tototto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tototto"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public static Vector searchDeadline(String deadline, Vector\u003cDefect\u003e issueList) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Date date \u003d new SimpleDateFormat(\"dd-MM-yyyy\", Locale.ENGLISH).parse(deadline);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Iterator iter \u003d issueList.iterator();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Vector\u003cDefect\u003e result \u003d new Vector\u003cDefect\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tototto"
        },
        "content": "        while (iter.hasNext()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tototto"
        },
        "content": "            Defect curr \u003d (Defect)iter.next();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tototto"
        },
        "content": "            if (curr.getDeadline().compareTo(date) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tototto"
        },
        "content": "                result.add(curr);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tototto"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tototto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tototto"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public static Vector searchOwner(String owner, Vector\u003cDefect\u003e issueList) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Iterator iter \u003d issueList.iterator();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Vector\u003cDefect\u003e result \u003d new Vector\u003cDefect\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tototto"
        },
        "content": "        while (iter.hasNext()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tototto"
        },
        "content": "            Defect curr \u003d (Defect)iter.next();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tototto"
        },
        "content": "            if (curr.getOwner().contains(owner)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tototto"
        },
        "content": "                result.add(curr);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tototto"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tototto"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tototto"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tototto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tototto": 78
    }
  },
  {
    "path": "src/main/java/seedu/itlogger/SortList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.util.Vector;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "public class SortList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static Vector sortList(IssueList list, int type) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        Vector\u003cDefect\u003e sorted \u003d list.getIssue();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        if (type \u003d\u003d 0) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            return sorted;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            quickSort(sorted, 0, sorted.size() - 1, type);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return sorted;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static void quickSort(Vector\u003cDefect\u003e toSort, int low, int high, int type) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        if (low \u003c high) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            // pi is partitioning index, arr[pi] is now at right place"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            int pi \u003d partition(toSort, low, high, type);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            quickSort(toSort, low, pi - 1, type);  // Before pi"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            quickSort(toSort, pi + 1, high, type); // After pi"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static int partition(Vector\u003cDefect\u003e toSort, int low, int high, int type) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        Defect pivot \u003d toSort.get(high);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        int i \u003d (low - 1);  // Index of smaller element"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        for (int j \u003d low; j \u003c\u003d high - 1; j++) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            // If current element is smaller than the pivot"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            if (compareList(toSort.get(j), pivot, type)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                i++;    // increment index of smaller element"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                Collections.swap(toSort, i, j);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        Collections.swap(toSort, i + 1, high);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        return (i + 1);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public static boolean compareList(Defect a, Defect b, int type) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        //compare severity ascending"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        case 1:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            if (a.severity \u003c b.severity) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        //compare severity descending"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        case 2:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            if (a.severity \u003e b.severity) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        //compare deadline ascending"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        case 3:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            if (a.deadline.before(b.deadline)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        //compare deadline descending"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        case 4:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            if (a.deadline.after(b.deadline)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        //compare dateRaised ascending"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        case 5:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            if (a.dateRaised.before(b.dateRaised)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        //compare dateRaised descending"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        case 6:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            if (a.dateRaised.after(b.dateRaised)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pigoliver": 92
    }
  },
  {
    "path": "src/main/java/seedu/itlogger/Status.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tototto"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tototto"
        },
        "content": "public enum Status {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tototto"
        },
        "content": "    New,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tototto"
        },
        "content": "    Accepted,"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tototto"
        },
        "content": "    Pending,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tototto"
        },
        "content": "    Closed,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tototto"
        },
        "content": "    Rejected,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tototto"
        },
        "content": "    Expired"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tototto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tototto": 10
    }
  },
  {
    "path": "src/main/java/seedu/itlogger/exception/EmptyListException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tototto"
        },
        "content": "package seedu.itlogger.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tototto"
        },
        "content": "public class EmptyListException extends ItLoggerException {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public EmptyListException(String message) {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tototto"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tototto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tototto": 8
    }
  },
  {
    "path": "src/main/java/seedu/itlogger/exception/ItLoggerException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "package seedu.itlogger.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "public class ItLoggerException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public ItLoggerException(String message) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pigoliver": 7
    }
  },
  {
    "path": "src/main/java/seedu/itlogger/storage/ItLoggerDecoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "package seedu.itlogger.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "import seedu.itlogger.Defect;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "import seedu.itlogger.IssueList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "import seedu.itlogger.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "import java.util.Vector;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "public class ItLoggerDecoder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "     * Decodes {@code encodedIssueList} into an {@code Vector of Defects } containing the decoded defects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "     * @throws StorageFile.StorageOperationException if any of the fields in any encoded defect string is invalid."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    public static Vector\u003cDefect\u003e decodeIssueList(List\u003cString\u003e encodedIssueList)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "            throws StorageFile.StorageOperationException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        final Vector\u003cDefect\u003e decodedDefects \u003d new Vector\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        for (String encodedDefects : encodedIssueList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "            decodedDefects.add(decodedDefectsFromSting(encodedDefects));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        return decodedDefects;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "     * Decodes {@code encodedDefects } into a {@code Defect}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "     * @throws StorageFile.StorageOperationException if any field in the {@code encodedDefect} is invalid."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    private static Defect decodedDefectsFromSting(String encodedDefects)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "            throws StorageFile.StorageOperationException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        final Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        String title \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        String status \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        String owner \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        int severity \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        Date deadLine \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "            title \u003d parser.parseTitle(encodedDefects);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "            status \u003d parser.parseStatus(encodedDefects);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "            severity \u003d parser.parseSeverity(encodedDefects);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "            deadLine \u003d parser.parseDeadline(encodedDefects);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "            owner \u003d parser.parseOwner(encodedDefects);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "            throw new StorageFile.StorageOperationException(\"File contents in wrong format\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "            throw new StorageFile.StorageOperationException(\"File contents in wrong format.\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                    + \"Pls check the formatting in txt file \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        return new Defect(title, status, severity, deadLine, owner);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JanuariusJang": 59
    }
  },
  {
    "path": "src/main/java/seedu/itlogger/storage/ItLoggerEncoder.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "package seedu.itlogger.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "import seedu.itlogger.Defect;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "import seedu.itlogger.IssueList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "public class ItLoggerEncoder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    //private static Date dateFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "     * Encodes all the {@code Defects} in the {@code toSave} into a list of decodable and readable string presentation"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "     * for storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    public static List\u003cString\u003e encodeItLogger(IssueList toSave) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        final List\u003cString\u003e encodedDefects \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        toSave.getIssue().forEach(defect -\u003e encodedDefects.add(encodeDefectToString(defect)));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        return encodedDefects;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    private static String encodeDefectToString(Defect defect) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        final StringBuilder encodedDefectBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        String strDate \u003d dateFormat.format(defect.getDeadline());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        encodedDefectBuilder.append(\"t/\").append(defect.getTitle()).append(\" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        encodedDefectBuilder.append(\"s/\").append(defect.getStatus()).append(\" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        encodedDefectBuilder.append(\"sv/\").append(defect.getSeverity()).append(\" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        encodedDefectBuilder.append(\"dl/\").append(strDate).append(\" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        encodedDefectBuilder.append(\"o/\").append(defect.getOwner());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        return encodedDefectBuilder.toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JanuariusJang": 37
    }
  },
  {
    "path": "src/main/java/seedu/itlogger/storage/StorageFile.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "package seedu.itlogger.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "import seedu.itlogger.IssueList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "public class StorageFile {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    /** Default file path used if the user doesn\u0027t provide the file name. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    public static final String DEFAULT_STORAGE_FILEPATH \u003d \"itlogger.txt\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    public final Path path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    public StorageFile() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        this(DEFAULT_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    public StorageFile(String filePath)  {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "     * Saves the {@code IssueList} data to the storage file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "     * @throws StorageOperationException if there were errors converting and/or storing data to file."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    public void save(IssueList issueList) throws StorageOperationException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "            List\u003cString\u003e encodedItLogger \u003d ItLoggerEncoder.encodeItLogger(issueList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "            Files.write(path, encodedItLogger);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "            throw new StorageOperationException(\"Error writing to file: \" + path);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "     * Loads the {@code Vector of Defects} data into the IssueList."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "     * @throws StorageOperationException if there were errors reading and/or converting data from file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    public void load(IssueList issueList) throws StorageOperationException, FileNotFoundException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        if (Files.exists(path)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                issueList.loadIssues(ItLoggerDecoder.decodeIssueList(Files.readAllLines(path)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                throw new StorageOperationException(\"File contents in wrong format\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "     * Signals that some error has occured while trying to convert and read/write data between the application"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "     * and the storage file."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    public static class StorageOperationException extends Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        public StorageOperationException(String message) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "            super(message);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JanuariusJang": 66
    }
  },
  {
    "path": "src/test/java/seedu/itlogger/DefectTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tototto"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tototto"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tototto"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseDeadline;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseOwner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseSeverity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseStatus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseTitle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tototto"
        },
        "content": "public class DefectTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tototto"
        },
        "content": "    String input;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tototto"
        },
        "content": "    Defect defect;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tototto"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public void defectTestSetup() throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tototto"
        },
        "content": "        input \u003d \"ADD t/Test s/New sv/1 dl/20-10-2020 o/Tester\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tototto"
        },
        "content": "        defect \u003d new Defect(parseTitle(input), parseStatus(input),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tototto"
        },
        "content": "                parseSeverity(input), parseDeadline(input), parseOwner(input));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tototto"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public void printingDefectTest() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tototto"
        },
        "content": "        // Todo -\u003e Write Test Here"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"MMM dd yyyy\",Locale.ENGLISH);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        String result \u003d \"Title: \" + \"Test\" + System.lineSeparator()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Status: \" + \"New\" + System.lineSeparator()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Severity: Level \" + \"1\" + System.lineSeparator()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Date Raised: \" + dateFormat.format(Date.from(Instant.now())) + System.lineSeparator()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Deadline: \" + \"Oct 20 2020\" + System.lineSeparator()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Owner: \" + \"Tester\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        assertEquals(defect.toString(), result);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tototto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhengShijieNUS": 13,
      "tototto": 30
    }
  },
  {
    "path": "src/test/java/seedu/itlogger/DeleteFunctionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "public class DeleteFunctionTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    public void deleteFunctionTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        IssueList issueList \u003d new IssueList();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "            issueList.addIssue(new Defect(\"cannot launch\", \"new\", 1,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                    new SimpleDateFormat(\"dd/MM/yyyy\").parse(\"20/10/2020\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                    \"Jack\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "            issueList.addIssue(new Defect(\"cannot login\", \"new\", 1,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                    new SimpleDateFormat(\"dd/MM/yyyy\").parse(\"20/10/2020\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                    \"Jack\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "            issueList.addIssue(new Defect(\"cannot exit\", \"new\", 1,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                    new SimpleDateFormat(\"dd/MM/yyyy\").parse(\"20/10/2020\"),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "                    \"Jack\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        //checks number of tasks created."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        assertEquals(3, issueList.getSize());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        //deletes the first item"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        issueList.deleteIssue(0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        //check that title of the next item"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        assertEquals(\"cannot login\", issueList.getDefect(0).title);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        //deletes the next item which is now index 0"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        issueList.deleteIssue(0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        //check that title of the next item"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        assertEquals(\"cannot exit\", issueList.getDefect(0).title);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        //deletes the next item which is now index 0"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        issueList.deleteIssue(0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        //checks number of tasks left."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "        assertEquals(0, issueList.getSize());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": "}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JanuariusJang"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JanuariusJang": 45
    }
  },
  {
    "path": "src/test/java/seedu/itlogger/IssueListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tototto"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tototto"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tototto"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tototto"
        },
        "content": "import java.util.Vector;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseStatus;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseTitle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseSeverity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseDeadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tototto"
        },
        "content": "import static seedu.itlogger.Parser.parseOwner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tototto"
        },
        "content": "public class IssueListTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tototto"
        },
        "content": "    private IssueList issueList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tototto"
        },
        "content": "    private Defect defect;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tototto"
        },
        "content": "    private String input;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tototto"
        },
        "content": "    private int defectNumber;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tototto"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public void issueListTestSetup() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tototto"
        },
        "content": "        defectNumber \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tototto"
        },
        "content": "        input \u003d \"ADD t/Test s/New sv/1 dl/20-10-2020 o/Tester\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tototto"
        },
        "content": "        issueList \u003d new IssueList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tototto"
        },
        "content": "        defect \u003d new Defect(parseTitle(input), parseStatus(input),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tototto"
        },
        "content": "                parseSeverity(input), parseDeadline(input), parseOwner(input));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tototto"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public void getIssueTest() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Vector\u003cDefect\u003e result \u003d issueList.getIssue();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assertEquals(result.size(), 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tototto"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public void addIssueTest() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tototto"
        },
        "content": "        issueList.addIssue(defect);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assertEquals(issueList.getIssue().size(), 1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tototto"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public void getDefectTest() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tototto"
        },
        "content": "        addIssueTest();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tototto"
        },
        "content": "        Defect result \u003d issueList.getDefect(defectNumber);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assertEquals(result, defect);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tototto"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tototto"
        },
        "content": "    public void deleteIssueTest() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tototto"
        },
        "content": "        addIssueTest();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tototto"
        },
        "content": "        issueList.deleteIssue(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tototto"
        },
        "content": "        assertEquals(issueList.getIssue().size(), 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tototto"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tototto"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tototto": 56
    }
  },
  {
    "path": "src/test/java/seedu/itlogger/ItLoggerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tototto"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "class ItLoggerTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void sampleTest() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(true);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tototto"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "tototto": 2,
      "-": 11,
      "pigoliver": 1
    }
  },
  {
    "path": "src/test/java/seedu/itlogger/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "import static seedu.itlogger.Parser.parseKeyWord;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "public class ParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public void simpleTest() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String testText \u003d \"ADD t/Test s/New sv/1 dl/20-10-2020 o/Tester\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assertEquals(Parser.parseKeyWord(testText),KeyWord.ADD);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assertEquals(Parser.parseStatus(testText),\"New\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assertEquals(Parser.parseTitle(testText),\"Test\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            assertEquals(Parser.parseSeverity(testText),1);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            assertEquals(Parser.parseDeadline(testText), new SimpleDateFormat(\"dd/MM/yyyy\").parse(\"20/10/2020\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            System.out.println(e);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assertEquals(Parser.parseOwner(testText),\"Tester\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public void viewKeyWordTest() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String testText \u003d \"VIEW v/10\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assertEquals(Parser.parseKeyWord(testText),KeyWord.VIEW);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assertEquals(Parser.parseIndex(testText,10),10);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "pigoliver"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    public void deleteKeyWordTest() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        String testText \u003d \"DELETE d/11\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assertEquals(Parser.parseKeyWord(testText),KeyWord.DELETE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assertEquals(Parser.parseIndex(testText,11),11);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "pigoliver": 40
    }
  },
  {
    "path": "src/test/java/seedu/itlogger/ViewFunctionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "package seedu.itlogger;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import static seedu.itlogger.Parser.parseTitle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import static seedu.itlogger.Parser.parseStatus;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import static seedu.itlogger.Parser.parseSeverity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import static seedu.itlogger.Parser.parseIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import static seedu.itlogger.Parser.parseDeadline;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "import static seedu.itlogger.Parser.parseOwner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "public class ViewFunctionTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    IssueList issueList \u003d new IssueList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"MMM dd yyyy\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    String input1;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    Defect defect1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    String input2;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    Defect defect2;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    String input3;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    Defect defect3;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public void viewFunctionTestSetup() throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        input1 \u003d \"ADD t/cannot launch s/new sv/1 dl/20-10-2020 o/Jack\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        defect1 \u003d new Defect(parseTitle(input1), parseStatus(input1),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                parseSeverity(input1), parseDeadline(input1), parseOwner(input1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        input2 \u003d \"ADD t/cannot login s/new sv/1 dl/20-10-2020 o/Jack\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        defect2 \u003d new Defect(parseTitle(input2), parseStatus(input2),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                parseSeverity(input2), parseDeadline(input2), parseOwner(input2));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        input3 \u003d \"ADD t/cannot exit s/new sv/1 dl/20-10-2020 o/Jack\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        defect3 \u003d new Defect(parseTitle(input3), parseStatus(input3),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                parseSeverity(input3), parseDeadline(input3), parseOwner(input3));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        issueList.addIssue(defect1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        issueList.addIssue(defect2);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        issueList.addIssue(defect3);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public void viewFunctionTest() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assertEquals(issueList.getDefect(parseIndex(\"/0\", issueList.getSize())).toString(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                \"Title: \" + \"cannot launch\" + System.lineSeparator()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Status: \" + \"new\" + System.lineSeparator()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Severity: Level \" + \"1\" + System.lineSeparator()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Date Raised: \" + dateFormat.format(Date.from(Instant.now())) + System.lineSeparator()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Deadline: \" + \"Oct 20 2020\" + System.lineSeparator()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Owner: \" + \"Jack\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assertEquals(issueList.getDefect(parseIndex(\"/1\", issueList.getSize())).toString(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                \"Title: \" + \"cannot login\" + System.lineSeparator()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Status: \" + \"new\" + System.lineSeparator()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Severity: Level \" + \"1\" + System.lineSeparator()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Date Raised: \" + dateFormat.format(Date.from(Instant.now())) + System.lineSeparator()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Deadline: \" + \"Oct 20 2020\" + System.lineSeparator()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Owner: \" + \"Jack\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "        assertEquals(issueList.getDefect(parseIndex(\"/2\", issueList.getSize())).toString(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                \"Title: \" + \"cannot exit\" + System.lineSeparator()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Status: \" + \"new\" + System.lineSeparator()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Severity: Level \" + \"1\" + System.lineSeparator()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Date Raised: \" + dateFormat.format(Date.from(Instant.now())) + System.lineSeparator()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Deadline: \" + \"Oct 20 2020\" + System.lineSeparator()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "                + \"Owner: \" + \"Jack\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    public void viewFunctionExceptionTest() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        Exception exception \u003d assertThrows(ArrayIndexOutOfBoundsException.class, () -\u003e {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "            issueList.getDefect(parseIndex(\"0\", issueList.getSize())).toString();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        });"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        String expectedMessage \u003d \"Index 1 out of bounds for length 1\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        String actualMessage \u003d exception.getMessage();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "        assertTrue(actualMessage.contains(expectedMessage));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ZhengShijieNUS"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ZhengShijieNUS": 90,
      "pigoliver": 4
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "James Gosling"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "pigoliver"
        },
        "content": "EXIT"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "pigoliver": 1
    }
  }
]
