[
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    implementation \u0027junit:junit:4.12\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    implementation \u0027junit:junit:4.12\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    implementation \u0027junit:junit:4.12\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        events \"passed\", \"skipped\", \"failed\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        showExceptions true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        showCauses true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        showStackTraces true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        showStandardStreams \u003d false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    mainClassName \u003d \"moneytracker.MoneyTracker\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    archiveBaseName \u003d \"MoneyTracker\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "run{"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daiweinus": 3,
      "e0260222": 3,
      "-": 44
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Design \u0026 implementation"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "{Describe the design and implementation of the product. Use UML diagrams and short code snippets where applicable.}"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "## Product scope"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "### Target user profile"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": "This app targets young working adults in Singapore who are living on"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": "a tight budget and would like to have better insight into their spending habits."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "### Value proposition"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": "This app allows users to track their incomes and expenses."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": "This helps them to stay within their budget and make timely adjustments to their spending habits when necessary."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## User Stories"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "|Version| As a ... | I want to ... | So that I can ...|"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "|--------|----------|---------------|------------------|"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": "|v1.0|potential user|download the app|get a feel what the app can do|"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0260222"
        },
        "content": "|v1.0|potential user|browse through the user guide|get an overview of what are the commands available|"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0260222"
        },
        "content": "|v1.0|new user|access the user guide|refer to it when I forget how to use the app|"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0260222"
        },
        "content": "|v1.0|new user|add an income|keep track of my incomes|"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0260222"
        },
        "content": "|v1.0|new user|add an expense|keep track of my expenses|"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0260222"
        },
        "content": "|v1.0|new user|add an income category|group my incomes under this category|"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0260222"
        },
        "content": "|v1.0|new user|add an expense category|group my expense under this category|"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "|v1.0|new user|list my incomes and expenses|view all my monetary transactions|"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "|v1.0|user|list my income and expense categories|view all my income and expense categories|"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0260222"
        },
        "content": "|v1.0|user|clear all my data|start afresh with the app|"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "|v1.0|expert user|list my incomes and/or expenses based on a specified month|view my filtered transactions|"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "|v2.0|user|view my total income and expense of the month upon app startup|get an overview of my incomes and expenses|"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "|v2.0|user|view a report on my incomes and expenses for a specified month|get a deep insight of my incomes and expenses|"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "|v2.0|user|set a monthly budget|get notified when I exceed 50%, 75% and 100% of my budget|"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0260222"
        },
        "content": "|v2.0|expert user|edit an income or expense category|change the name of the category|"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0260222"
        },
        "content": "|v2.0|expert user|edit an income or expenses|change any of its parameters such as amount and date|"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "|v2.0|expert user|list my incomes and/or expenses based on a specified category|view my filtered transactions|"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "## Non-Functional Requirements"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0260222"
        },
        "content": "1. The app should work on any mainstream OS with Java `11` or above installed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "2. The response time for each command should not exceed `3` seconds."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "3. A user with average typing speed should be able to enter any one command within `10` seconds."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "4. After using each command for at least `3` times, a user with no cognitive disability should be able to"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "use all the app features without having to reference the user guide."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "## Glossary"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0260222"
        },
        "content": "* *Mainstream OS* - Windows 7, Windows 10, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "## Instructions for manual testing"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "{Give instructions on how to do a manual product testing e.g., how to load sample data to be used for testing}"
      }
    ],
    "authorContributionMap": {
      "daiweinus": 3,
      "dgc5213": 5,
      "e0260222": 16,
      "Chenduo1412": 3,
      "-": 27
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Money Tracker is a CLI application that allows users to keep track of their income and expenses."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Users can record their inflows and outflows of money and then view monthly reports of these movements of money."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": "2. Download the latest `MoneyTracker.jar` [here](https://github.com/AY2021S1-TIC4001-2/tp/releases)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": "3. Copy `MoneyTracker.jar` to the folder you want to use as the home folder for Money Tracker."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0260222"
        },
        "content": "4. Navigate to the home folder for Duke on your CLI program."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0260222"
        },
        "content": "5. Launch Money Tracker by running the command `java -jar MoneyTracker.jar`."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": "6. Type the command in the CLI program and press `Enter` to execute it."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": "\u003cbr\u003eSome example commands you can try:"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    - `addcate lunch`: Adds an expense category."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    - `listcat /te`: Lists all expense categories."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    - `adde /a3.50 /cFood /d2020-09-20 /eLunch with boss.`: Adds an expense."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    - `list /te /m2020-09`: Lists all expenses in Sep 2020."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    - `report 2020-09`: Displays summary report for Sep 2020."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": "7. Refer to **Features** below for details of each command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Notes about the command format:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0260222"
        },
        "content": "- Words in UPPER_CASE are the parameters to be supplied by the user.\u003cbr /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0260222"
        },
        "content": "E.g. `DESCRIPTION` in the command `addi /aAMOUNT /cINCOME_CATEGORY [/dDATE] [/eDESCRIPTION]`."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0260222"
        },
        "content": "- Parameters in square brackets are optional.\u003cbr /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0260222"
        },
        "content": "E.g. `TYPE` in the command `listcat [/tTYPE]` can be omitted."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0260222"
        },
        "content": "- Parameters can be in any order.\u003cbr /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0260222"
        },
        "content": "E.g. The command `list [/tTYPE] [/mMONTH]` can also be in this form: `list [/mMONTH] [/tTYPE]`."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0260222"
        },
        "content": "### Viewing help: `help`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Shows the URL of the user manual."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Example of usage: `help`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0260222"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Please refer to this online user guide:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0260222"
        },
        "content": "https://ay2021s1-tic4001-2.github.io/tp/UserGuide.html"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0260222"
        },
        "content": "```"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "### Adding an income category: `addcati`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Adds an income category. Income category is used for classifying incomes. E.g. SALARY, DIVIDEND, INTEREST."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Format: `addcati INCOME_CATEGORY`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "- `INCOME_CATEGORY` is case-insensitive; income categories will be stored and"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  displayed in uppercase. E.g. `salary` will be stored and displayed as `SALARY`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Example of usage: `addcati salary`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "```"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Got it! I have added this income category:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  [I] SALARY"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  Now you have 1 categories in your list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "### Adding an expense category: `addcate`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Adds an expense category. Expense category is used for classifying expense. E.g. FOOD, RENT, ENTERTAINMENT."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Format: `addcate EXPENSE_CATEGORY`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "- `EXPENSE_CATEGORY` is case-insensitive; expense categories will be stored and"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "displayed in uppercase. E.g. `Food` will be stored and displayed as `FOOD`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Example of usage: `addcate Food`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "```"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Got it! I have added this expense category:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  [E] FOOD"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  Now you have 2 categories in your list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "```"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0260222"
        },
        "content": "### Listing all income / expense categories: `listcat`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Shows a list of all income and/or expense categories."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Format: `listcat [/tTYPE]`"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "- `TYPE` must either be the letter `i` or `e`. If `TYPE` is `i`, only income categories will be"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "listed. Similarly, if `TYPE` is `e`, only expense categories will be listed. If `TYPE` is"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "omitted, both income and expense categories will be listed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Example of usage: `listcat /te`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "```"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Here are your expense categories:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  1. [E] FOOD"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  2. [E] RENT"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  3. [E] ENTERTAINMENT"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "```"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Example of usage: `listcat`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Here are your categories:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  1. [I] SALARY"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  2. [I] DIVIDEND"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  3. [E] FOOD"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  4. [E] RENT"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  5. [E] ENTERTAINMENT"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0260222"
        },
        "content": "### Editing an income / expense category: `editcat`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Edits a specified income or expense category."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Format: `editcat INDEX /nNEW_NAME`"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0260222"
        },
        "content": "- The `listcat` command must be executed first before using the `editcat` command."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0260222"
        },
        "content": "- `INDEX` refers to the index number shown in the list generated by the `listcat` command."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0260222"
        },
        "content": "- `INDEX` must a positive integer. E.g. `1`, `2`, `3`…"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0260222"
        },
        "content": "- The category indicated by the index number will be changed to `NEW_NAME`."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Example of usage: `editcat 1 /nSalary`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0260222"
        },
        "content": "```"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Noted! I have edited this income category: "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0260222"
        },
        "content": "   From [I] SALARIES to [I] SALARY"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0260222"
        },
        "content": "```"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "### Deleting an income / expense category: `deletecat`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Deletes a specified income or expense category."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Format: `deletecat INDEX`"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "- The `listcat` command must be executed first before using the `deletecat` command."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "- `INDEX` refers to the index number shown in the list generated by the `listcat` command."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "- `INDEX` must a positive integer. E.g. `1`, `2`, `3`…"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "- The category indicated by the index number will be deleted."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Example of usage: `deletecat 5`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "```"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Noted! I have removed this expense category:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  [E] ENTERTAINMENT"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  Now you have 4 categories in your list."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "```"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0260222"
        },
        "content": "### Adding an income: `addi`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Adds an income."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Format: `addi /aAMOUNT /cINCOME_CATEGORY [/dDATE] [/eDESCRIPTION]`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0260222"
        },
        "content": "- `AMOUNT` must be a positive integer or decimal. E.g. `4000`, `3000.75`, `2000.5`."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0260222"
        },
        "content": "- `INCOME_CATEGORY` is case-insensitive. E.g. `salary` will match `SALARY`."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0260222"
        },
        "content": "- `DATE` must be in yyyy-MM-dd format. E.g. `2020-09-20`."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0260222"
        },
        "content": "-  If `DATE` is omitted, the date of this income will be set to the current date of the system."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0260222"
        },
        "content": "- If `DESCRIPTION` is omitted, the description of this income will be blank."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Example of usage: `addi /a9000 /cSalary /d2020-09-01 /eGiven $4000 bonus!`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0260222"
        },
        "content": "```"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Got it! I’ve added this income:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    [I] SALARY $9000.00 on 01 Sep 2020 (Given $4000 bonus!)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    Now you have 1 transactions in your list."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0260222"
        },
        "content": "```"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0260222"
        },
        "content": "### Adding an expense: `adde`"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Adds an expense."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Format: `adde /aAMOUNT /cEXPENSE_CATEGORY [/dDATE] [/eDESCRIPTION]`"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0260222"
        },
        "content": "- `AMOUNT` must be a positive integer or decimal. E.g. `400`, `3.50`, `4.5`."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0260222"
        },
        "content": "- `EXPENSE_CATEGORY` is case-insensitive. E.g. `Food` will match `FOOD`."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0260222"
        },
        "content": "- `DATE` must be in yyyy-MM-dd format. E.g. `2020-09-20`."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0260222"
        },
        "content": "-  If `DATE` is omitted, the date of this expense will be set to the current date of the system."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0260222"
        },
        "content": "- If `DESCRIPTION` is omitted, the description of this expense will be blank."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Example of usage: `adde /a3.50 /cFood /d2020-09-20 /eLunch with boss.`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0260222"
        },
        "content": "```"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Got it! I’ve added this expense:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    [E] FOOD $3.50 on 20 Sep 2020 (Lunch with boss.)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    Now you have 2 transactions in your list."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0260222"
        },
        "content": "```"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "### Listing incomes / expenses: `list`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Shows a list of incomes / expenses."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Format:  `list [/tTYPE] [/mMONTH]` \u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "- `TYPE` must either be the letter `i` or `e`. If `TYPE` is `i`, only incomes will be listed."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Similarly, if `TYPE` is `e`, only expenses will be listed. If `TYPE` is omitted, both"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "incomes and expenses will be listed. "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "- `MONTH` must be in `yyyy-MM` format. E.g. `2020-09`. Only transactions in this month"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "will be listed. If `MONTH` is omitted, all transactions will be listed."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "- `CATEGORY` must be added behind `/c`. `CATEGORY` can be case-insensitive. Only matched transactions in this category will be listed. "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "- Other feasible list commands. Also, the order of filter condition is flexible: \u003cbr\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  * `list` "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  * `list [/tTYPE]` , or `list [/mMONTH]` , or `list [/cCATEGORY]` "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  * `list [/tTYPE] [/mMONTH]` , or `list [/mMONTH] [/tTYPE]`,or `list [/mMONTH] [/cCATEGORY]`,or `list [/cCATEGORY] [/mMONTH]`,or `list [/tTYPE] [/cCATEGORY]`,or `list [/cCATEGORY] [/tTYPE] ` "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  * `list [/tTYPE] [/mMONTH] [/cCATEGORY]`, or `list [/mMONTH] [/cCATEGORY] [/tTYPE]`, or `list [/cCATEGORY] [/mMONTH] [/tTYPE]`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Example of usage: `list /te /m2020-09` "
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Here are your expense records for 2020-09:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  1. [E] RENT $500 on 01 Sep 2020"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  2. [E] FOOD $10.00 on 18 Sep 2020 (Dinner at McDonalds’)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  3. [E] FOOD $3.50 on 20 Sep 2020 (Lunch with boss.)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "```"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Example of usage: `list`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "```"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Here are your transactions:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  1. [I] SALARY $5000.00 on 01 Aug 2020"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  2. [E] RENT $500 on 01 Aug 2020"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  3. [I] SALARY $9000.00 on 01 Sep 2020 (Given $4000 bonus!)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  4. [E] RENT $500 on 01 Sep 2020"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  5. [E] FOOD $10.00 on 18 Sep 2020 (Dinner at McDonalds’)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  6. [E] FOOD $3.50 on 20 Sep 2020 (Lunch with boss.)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "```"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Example of usage: `list /te`  "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "```"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Here are your transactions:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  1. [E] RENT $500 on 01 Aug 2020"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  2. [E] RENT $500 on 01 Sep 2020"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  3. [E] FOOD $10.00 on 18 Sep 2020 (Dinner at McDonalds’)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  4. [E] FOOD $3.50 on 20 Sep 2020 (Lunch with boss.)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "```"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Example of usage: `list /m2020-09`  "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "```"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Here are your transactions:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  1. [I] SALARY $9000.00 on 01 Sep 2020 (Given $4000 bonus!)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  2. [E] RENT $500 on 01 Sep 2020"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  3. [E] FOOD $10.00 on 18 Sep 2020 (Dinner at McDonalds’)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  4. [E] FOOD $3.50 on 20 Sep 2020 (Lunch with boss.)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "```"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Example of usage: `list /cSALARY`  "
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "```"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Here are your transactions:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  1. [I] SALARY $5000.00 on 01 Aug 2020"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  2. [I] SALARY $9000.00 on 01 Sep 2020 (Given $4000 bonus!)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "```"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Example of usage: `list /te /m2020-09 /cFOOD` "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "```"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Here are your expense records for 2020-09:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  1. [E] FOOD $10.00 on 18 Sep 2020 (Dinner at McDonalds’)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "  2. [E] FOOD $3.50 on 20 Sep 2020 (Lunch with boss.)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "```"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "e0260222"
        },
        "content": "### Editing an income / expense: `edit`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Edits a specified income or expense."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Format: `edit INDEX [/aAMOUNT] [/cCATEGORY] [/dDATE] [/eDESCRIPTION]`"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "e0260222"
        },
        "content": "- The `list` command must be executed first before using the `edit` command."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "e0260222"
        },
        "content": "- `INDEX` refers to the index number shown in the list generated by the `list` command."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "e0260222"
        },
        "content": "- `INDEX` must a positive integer. E.g. `1`, `2`, `3`."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "e0260222"
        },
        "content": "- The transaction indicated by the index number will be edited."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "e0260222"
        },
        "content": "- `AMOUNT` must be a positive integer or decimal. E.g. `400`, `3.50`, `4.5`."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "e0260222"
        },
        "content": "- `CATEGORY` is case-insensitive. E.g. `Food` will match `FOOD`."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "e0260222"
        },
        "content": "- `CATEGORY` must match an existing income / expense category."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "e0260222"
        },
        "content": "- `DATE` must be in yyyy-MM-dd format. E.g. `2020-09-20`."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Example of usage: `edit 1 /a500 /cDIVIDEND /d2020-10-21 /eFrom Singtel`"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "e0260222"
        },
        "content": "```"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Noted! I have edited this income: "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "e0260222"
        },
        "content": "   From [I] SALARY $4000.00 on 20 Oct 2020 to [I] DIVIDEND $500.00 on 21 Oct 2020 (From Singtel)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "e0260222"
        },
        "content": "```"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "### Deleting an income / expense: `delete`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Deletes a specified income or expense."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "- The `list` command must be executed first before using the `delete` command."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "- `INDEX` refers to the index number shown in the list generated by the `list` command."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "- `INDEX` must a positive integer. E.g. `1`, `2`, `3`."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "- The transaction indicated by the index number will be deleted."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Example of usage: `delete 5`"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "```"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Noted! I have removed this expense:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    [E] FOOD $10.00 on 18 Sep 2020 (Dinner at McDonalds’)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "```"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "### Clearing all data: `clear`"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Clears all incomes / expenses and income / expense categories."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "e0260222"
        },
        "content": "- The app will prompt for a confirmation. Enter `Y` to confirm the data clear or `N` to cancel the clear command."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Example of usage: `clear`"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "```"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Noted! I have cleared all data."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "```"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "e0260222"
        },
        "content": "### Setting monthly budget: `budget`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Sets monthly budget."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Format: `budget AMOUNT`"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "e0260222"
        },
        "content": "- `AMOUNT` must be `0` or a positive integer or decimal. E.g. `4000`, `3500.5`, `3000.50`."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "e0260222"
        },
        "content": "- During startup, the app will alert the user when the total expenses for the month exceed "
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "e0260222"
        },
        "content": "50%, 75% and 100% of the budget."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "e0260222"
        },
        "content": "- if `AMOUNT` is `0`, the budget alert will be disabled."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Example of usage: `budget 5000`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "e0260222"
        },
        "content": "```"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Got it! I have set your monthly budget to this amount:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "e0260222"
        },
        "content": "   $5000.00"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "```"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "### Viewing monthly report: `report`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "Shows a report that summarises the incomes and expenses for a specified month."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "Format: `report`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "- The summary report for the last six months will be displayed."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "Example of usage: `report`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "```"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "Here is your report:"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "Income for last 6 months (Highest to lowest):"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "  [I] 2020-09 $27597.4"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "  [I] 2020-06 $0.0"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "  [I] 2020-05 $0.0"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "  [I] 2020-10 $0.0"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "  [I] 2020-08 $0.0"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "  [I] 2020-07 $0.0"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "Income for last 6 months (Highest to lowest):"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "  [E] 2020-09 $31.0"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "  [E] 2020-06 $0.0"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "  [E] 2020-05 $0.0"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "  [E] 2020-10 $0.0"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "  [E] 2020-08 $0.0"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "  [E] 2020-07 $0.0"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "```"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "Format: `report MONTH`"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "e0260222"
        },
        "content": "- `MONTH` must be in yyyy-MM format. E.g. `2020-09`."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "- The summary report for the specified month will be displayed."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "Example of usage: `report 2020-09`"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "```"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "Here is your transactions for 2020-09 :"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "Total Income: $27597.40"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "Total Expense: $31.00"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "Balance: $27566.40"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "This month has 30 days."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "Average Expense Per Day: $1.03"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "Highest Income transaction: "
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "  [I] SALARY $9000.00 on 1 Sep 2020 (Given $4000 bonus!)"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "Highest Income transaction: "
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "  [E] DRINK $9.50 on 20 Sep 2020 (Lunch with boss.)"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "Income Category by Frequency:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "  [I] HONGBAO: 5"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "  [I] SALARY: 3"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "Expense Category by Frequency:"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "  [E] DRINK: 4"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "  [E] FOOD: 2"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "Income Category by Amount:"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "  [I] SALARY $27000.0"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "  [I] HONGBAO $597.4"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "Expense Category by Amount:"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "  [E] DRINK $24.0"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "  [E] FOOD $7.0"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "____________________________________________________________________"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "You:  "
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "```"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "### Exiting the program: `exit`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "Exits the program. "
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Example of usage: `exit`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "e0260222"
        },
        "content": "```"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Bye! Hope to see you again soon."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "e0260222"
        },
        "content": "```"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "e0260222"
        },
        "content": "### Saving the data"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "e0260222"
        },
        "content": "There is no save command because any change "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "e0260222"
        },
        "content": "to the data will be automatically saved."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "e0260222"
        },
        "content": "**Q**:"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "e0260222"
        },
        "content": "How do I transfer my data to another computer? "
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "e0260222"
        },
        "content": "**A**: "
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Go to Money Tracker\u0027s root folder in the current computer."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Copy the data folder and paste it into the Money Tracker\u0027s root folder in the new computer."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "e0260222"
        },
        "content": "Click `Yes` if the system prompts you for confirmation of overwriting."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "e0260222"
        },
        "content": "* View help `help`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "e0260222"
        },
        "content": "* Add income category `addcati INCOME_CATEGORY`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "e0260222"
        },
        "content": "* Add expense category `addcate EXPENSE_CATEGORY`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "e0260222"
        },
        "content": "* List income / expense categories `listcat [/tTYPE]`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "e0260222"
        },
        "content": "* Edit income / expense category `editcat INDEX /nNEW_NAME`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "e0260222"
        },
        "content": "* Delete income / expense category `deletecat INDEX`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "* Add income `addi /aAMOUNT /cINCOME_CATEGORY [/dDATE] [/eDESCRIPTION]`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "* Add expense `adde /aAMOUNT /cEXPENSE_CATEGORY [/dDATE] [/eDESCRIPTION]`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "e0260222"
        },
        "content": "* List incomes / expenses `list [/tTYPE] [/mMONTH]`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "e0260222"
        },
        "content": "* Edit income / expense `edit INDEX [/aAMOUNT] [/cCATEGORY] [/dDATE] [/eDESCRIPTION]`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "* Delete income / expense `delete INDEX`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "e0260222"
        },
        "content": "* Clear data `clear`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "e0260222"
        },
        "content": "* Set monthly budget `budget AMOUNT`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "e0260222"
        },
        "content": "* View monthly report `report MONTH`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "e0260222"
        },
        "content": "* Exit program `exit`"
      }
    ],
    "authorContributionMap": {
      "daiweinus": 66,
      "dgc5213": 191,
      "e0260222": 156,
      "-": 27
    }
  },
  {
    "path": "src/main/java/moneytracker/MoneyTracker.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.summary.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.command.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.exception.MoneyTrackerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "import moneytracker.summary.Summary;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "import moneytracker.transaction.Expense;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "import moneytracker.transaction.Income;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "import moneytracker.transaction.TransactionList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "import moneytracker.transaction.CategoryList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "import moneytracker.transaction.Transaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.ui.Ui;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * Implements an application that allows users to manage monetary transactions."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * It contains methods that allow the creation, modification and storage of monetary transactions."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class MoneyTracker {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private final Ui ui;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private TransactionList transactions;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private CategoryList categories;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private Budget budget;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Initializes a \u003ccode\u003eMoneyTracker\u003c/code\u003e object."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param transactionsFilePath Path of the text file used for storing app data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public MoneyTracker(String transactionsFilePath, String categoriesFilePath, String budgetFilePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assert !transactionsFilePath.isBlank() : \"filePath should not be blank\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        storage \u003d new Storage(transactionsFilePath, categoriesFilePath, budgetFilePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            storage.createDirectory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (MoneyTrackerException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            ui.printError(e.getMessage());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            categories \u003d new CategoryList(storage.loadCategories(categoriesFilePath));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (MoneyTrackerException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            ui.printError(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            categories \u003d new CategoryList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            transactions \u003d new TransactionList(storage.loadTransactions(transactionsFilePath));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (MoneyTrackerException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            ui.printError(e.getMessage());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            transactions \u003d new TransactionList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            budget \u003d new Budget(storage.loadBudget(budgetFilePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (MoneyTrackerException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            ui.printError(e.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            budget \u003d new Budget();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        ui.printLogo();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "        double exp \u003d Summary.calExpSummary(transactions);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "        double inc \u003d Summary.calIncSummary(transactions);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "        ui.printSummary(exp, inc);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "        if (budget.getAmount() !\u003d 0) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "            if (!budget.calPercentage(exp).equals(\"0\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "                ui.printPctOfBudget(budget.calPercentage(exp),budget.getAmount());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        ui.printWelcome();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                String fullCommand \u003d ui.readUserCommand();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                Command c \u003d Parser.parse(fullCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                c.execute(transactions, ui, storage, categories, budget);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                isExit \u003d c.isExit();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            } catch (MoneyTrackerException e) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                ui.printError(e.getMessage());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *  Main method of Money Tracker. This is the starting point of the app."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *  @param args Command line arguments. Not used."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        new MoneyTracker(\"data/transactions.txt\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                \"data/categories.txt\", \"data/budget.txt\").run();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0260222": 78,
      "Chenduo1412": 18
    }
  },
  {
    "path": "src/main/java/moneytracker/command/AddExpenseCategoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.summary.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.exception.MoneyTrackerException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import moneytracker.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.CategoryList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.TransactionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * Contains the methods for user to add an expense category."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class AddExpenseCategoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private final String fullCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Initializes a \u003ccode\u003eAddIncomeCategoryCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param fullCommand User\u0027s full input string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public AddExpenseCategoryCommand(String fullCommand) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Executes the add expense category command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param categories List of \u003ccode\u003eCategory\u003c/code\u003e objects."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param budget \u003ccode\u003eBudget\u003c/code\u003e object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If there is a processing error."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public void execute(TransactionList transactions, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                        CategoryList categories, Budget budget) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        categories.addCategory(Parser.createExpenseCategory(fullCommand));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        storage.saveCategories(categories);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        ui.printAddCategory(categories);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daiweinus": 2,
      "e0260222": 41
    }
  },
  {
    "path": "src/main/java/moneytracker/command/AddExpenseCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.summary.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.exception.MoneyTrackerException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.CategoryList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.TransactionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * Contains the methods for user to add an expense."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class AddExpenseCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private final String fullCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Initializes a \u003ccode\u003eAddExpenseCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param fullCommand User\u0027s full input string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public AddExpenseCommand(String fullCommand) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Executes the add expense command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param categories List of \u003ccode\u003eCategory\u003c/code\u003e objects."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param budget \u003ccode\u003eBudget\u003c/code\u003e object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If there is a processing error."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public void execute(TransactionList transactions, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                        CategoryList categories, Budget budget) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        transactions.addTransaction(Parser.createExpense(fullCommand), categories);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        storage.saveTransactions(transactions);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        ui.printAddTransaction(transactions);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daiweinus": 1,
      "e0260222": 42
    }
  },
  {
    "path": "src/main/java/moneytracker/command/AddIncomeCategoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.summary.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.exception.MoneyTrackerException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import moneytracker.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.CategoryList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.TransactionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * Contains the methods for user to add an income category."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class AddIncomeCategoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private final String fullCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Initializes a \u003ccode\u003eAddIncomeCategoryCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param fullCommand User\u0027s full input string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public AddIncomeCategoryCommand(String fullCommand) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Executes the add income category command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param categories List of \u003ccode\u003eCategory\u003c/code\u003e objects."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param budget \u003ccode\u003eBudget\u003c/code\u003e object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If there is a processing error."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public void execute(TransactionList transactions, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                        CategoryList categories, Budget budget) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        categories.addCategory(Parser.createIncomeCategory(fullCommand));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        storage.saveCategories(categories);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        ui.printAddCategory(categories);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daiweinus": 2,
      "e0260222": 41
    }
  },
  {
    "path": "src/main/java/moneytracker/command/AddIncomeCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.summary.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.exception.MoneyTrackerException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.CategoryList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.TransactionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * Contains the methods for user to add an income."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class AddIncomeCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private final String fullCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Initializes a \u003ccode\u003eAddIncomeCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param fullCommand User\u0027s full input string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public AddIncomeCommand(String fullCommand) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Executes the add income command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param categories List of \u003ccode\u003eCategory\u003c/code\u003e objects."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param budget \u003ccode\u003eBudget\u003c/code\u003e object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If there is a processing error."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public void execute(TransactionList transactions, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                        CategoryList categories, Budget budget) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        transactions.addTransaction(Parser.createIncome(fullCommand), categories);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        storage.saveTransactions(transactions);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        ui.printAddTransaction(transactions);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daiweinus": 1,
      "e0260222": 42
    }
  },
  {
    "path": "src/main/java/moneytracker/command/BudgetCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.summary.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.exception.MoneyTrackerException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.CategoryList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.TransactionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * Contains the methods for user to change the monthly budget."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class BudgetCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private final String fullCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Initializes a \u003ccode\u003eBudgetCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param fullCommand User\u0027s full input string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public BudgetCommand(String fullCommand) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Executes the budget command."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param categories List of \u003ccode\u003eCategory\u003c/code\u003e objects."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param budget \u003ccode\u003eBudget\u003c/code\u003e object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If there is a processing error."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void execute(TransactionList transactions, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                        CategoryList categories, Budget budget) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        budget.setBudget(Parser.getBudgetAmount(fullCommand));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        storage.saveBudget(budget);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        ui.printBudget(budget);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0260222": 43
    }
  },
  {
    "path": "src/main/java/moneytracker/command/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.summary.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.exception.MoneyTrackerException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.CategoryList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.TransactionList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * Contains the methods for user to clear all data."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Executes the clear all data command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param categories List of \u003ccode\u003eCategory\u003c/code\u003e objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param budget \u003ccode\u003eBudget\u003c/code\u003e object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If there is a processing error."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public void execute(TransactionList transactions, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                        CategoryList categories, Budget budget) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        ui.printClearConfirmation();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            String confirmation \u003d ui.readUserCommand().toUpperCase();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            if (confirmation.equals(\"Y\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                categories.clearCategories();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                transactions.clearTransactions();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                storage.clearAllData();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                ui.printClearAllData(confirmation);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            } else if (confirmation.equals(\"N\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                ui.printClearAllData(confirmation);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                ui.printClearAllData(confirmation);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daiweinus": 2,
      "e0260222": 43
    }
  },
  {
    "path": "src/main/java/moneytracker/command/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.summary.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.exception.MoneyTrackerException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.CategoryList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.TransactionList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * Represents a command that a user wants to execute. A \u003ccode\u003eCommand\u003c/code\u003e object contains"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * methods needed for executing the user\u0027s command . This class defines the common behaviour that"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * can be inherited by subclasses with specific implementation of a Command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Executes the user\u0027s command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param categories List of \u003ccode\u003eCategory\u003c/code\u003e objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param budget \u003ccode\u003eBudget\u003c/code\u003e object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If there is a processing error."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public abstract void execute(TransactionList transactions, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                        CategoryList categories, Budget budget) throws MoneyTrackerException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Returns false to prevent Money Tracker from exiting after the command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Subclasses should override this method to return true if Duke"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * needs to exit after the command."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daiweinus": 1,
      "e0260222": 36
    }
  },
  {
    "path": "src/main/java/moneytracker/command/DeleteCategoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.summary.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.exception.MoneyTrackerException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.CategoryList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.TransactionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * Contains the methods for user to delete a category."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class DeleteCategoryCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private final String fullCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Initializes a \u003ccode\u003eDeleteCategoryCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param fullCommand User\u0027s full input string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public DeleteCategoryCommand(String fullCommand) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Executes the delete category command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param categories List of \u003ccode\u003eCategory\u003c/code\u003e objects."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param budget \u003ccode\u003eBudget\u003c/code\u003e object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If there is a processing error."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public void execute(TransactionList transactions, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                        CategoryList categories, Budget budget) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (!(categories.getIsInitialized())) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"Please run the listcat command first.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        int categoryIndex \u003d Parser.getDeleteIndex(fullCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        Category categoryToDelete;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            categoryToDelete \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                    categories.getCategory(categories.getSearchResultIndex(categoryIndex));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"The index is invalid.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String description \u003d categoryToDelete.toString();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String type \u003d categoryToDelete.getType().toLowerCase() + \" category\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        categories.removeCategory(categories.getSearchResultIndex(categoryIndex));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        storage.saveCategories(categories);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        ui.printRemoveCategory(categories.getSize(), description, type);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        categories.setIsInitialized(false);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daiweinus": 1,
      "e0260222": 57
    }
  },
  {
    "path": "src/main/java/moneytracker/command/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.summary.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.exception.MoneyTrackerException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.CategoryList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.Transaction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.TransactionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import static moneytracker.command.Utilities.getTransactionType;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import static moneytracker.command.Utilities.getTransaction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * Contains the methods for user to delete a transaction."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private final String fullCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Initializes a \u003ccode\u003eDeleteCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param fullCommand User\u0027s full input string."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public DeleteCommand(String fullCommand) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Executes the delete transaction command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param categories List of \u003ccode\u003eCategory\u003c/code\u003e objects."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param budget \u003ccode\u003eBudget\u003c/code\u003e object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If there is a processing error."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public void execute(TransactionList transactions, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                        CategoryList categories, Budget budget) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (!(transactions.getIsInitialized())) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"Please run the list command first.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        int index \u003d Parser.getDeleteIndex(fullCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        Transaction transactionToDelete \u003d getTransaction(transactions, index);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String description \u003d transactionToDelete.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String type \u003d getTransactionType(transactionToDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        transactions.removeTransaction(transactions.getSearchResultIndex(index));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        storage.saveTransactions(transactions);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        ui.printRemoveTransaction(transactions.getSize(), description, type);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        transactions.setIsInitialized(false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daiweinus": 1,
      "e0260222": 54
    }
  },
  {
    "path": "src/main/java/moneytracker/command/EditCategoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.summary.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.exception.MoneyTrackerException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.CategoryList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.TransactionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.Category;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.ui.Ui;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * Contains the methods for user to edit a category."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class EditCategoryCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private final String fullCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Initializes a \u003ccode\u003eEditCategoryCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param fullCommand User\u0027s full input string."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public EditCategoryCommand(String fullCommand) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Executes the edit category command."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param categories List of \u003ccode\u003eCategory\u003c/code\u003e objects."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param budget \u003ccode\u003eBudget\u003c/code\u003e object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If there is a processing error."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void execute(TransactionList transactions, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                        CategoryList categories, Budget budget) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (!(categories.getIsInitialized())) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"Please run the listcat command first.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String[] editParams \u003d Parser.getEditCategoryParams(fullCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            index \u003d Integer.parseInt(editParams[0]) - 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"The index is invalid.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        Category categoryToEdit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            categoryToEdit \u003d categories.getCategory(categories.getSearchResultIndex(index));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"The index is invalid.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String newName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            newName \u003d editParams[1];"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"The new category name is missing.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String currentName \u003d categoryToEdit.getName();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String currentDescription \u003d categoryToEdit.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        categoryToEdit.setName(newName.toUpperCase());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        transactions.updateTransactionsCategory(currentName, newName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String type \u003d categoryToEdit.getType().toLowerCase() + \" category\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String newDescription \u003d categoryToEdit.toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        ui.printEditItem(currentDescription, newDescription, type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        storage.saveCategories(categories);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        categories.setIsInitialized(false);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0260222": 72
    }
  },
  {
    "path": "src/main/java/moneytracker/command/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.summary.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.exception.MoneyTrackerException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.CategoryList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.TransactionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.Transaction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.Income;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.ui.Ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import static moneytracker.command.Utilities.getTransactionType;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import static moneytracker.command.Utilities.getTransaction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * Contains the methods for user to edit a transaction."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private final String fullCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Initializes a \u003ccode\u003eEditCategoryCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param fullCommand User\u0027s full input string."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public EditCommand(String fullCommand) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Executes the edit transaction command."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param categories List of \u003ccode\u003eCategory\u003c/code\u003e objects."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param budget \u003ccode\u003eBudget\u003c/code\u003e object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If there is a processing error."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void execute(TransactionList transactions, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                        CategoryList categories, Budget budget) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (!(transactions.getIsInitialized())) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"Please run the list command first.\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        HashMap\u003cString, String\u003e editParams \u003d Parser.getEditTransactionParams(fullCommand);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        int index \u003d getIndex(editParams);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        Transaction transactionToEdit \u003d getTransaction(transactions, index);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String currentDescription \u003d transactionToEdit.toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String type \u003d getTransactionType(transactionToEdit).toLowerCase();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        updateTransaction(transactionToEdit, editParams, categories, type);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String newDescription \u003d transactionToEdit.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        storage.saveTransactions(transactions);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        ui.printEditItem(currentDescription, newDescription, type);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        transactions.setIsInitialized(false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private int getIndex(HashMap\u003cString, String\u003e editParams) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String indexString \u003d editParams.get(\"index\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            index \u003d Integer.parseInt(indexString) - 1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"The index is invalid.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private void updateTransaction(Transaction transactionToEdit, HashMap\u003cString,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            String\u003e editParams, CategoryList categories, String type) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (editParams.containsKey(\"category\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            String category \u003d editParams.get(\"category\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            if (!(categories.checkIfCategoryExists(category, type))) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                throw new MoneyTrackerException(\"This category does not exist.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            if (getTransactionType(transactionToEdit).equals(\"INCOME\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                ((Income) transactionToEdit).setIncomeCategory(editParams.get(\"category\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            if (getTransactionType(transactionToEdit).equals(\"EXPENSE\")) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                ((Expense) transactionToEdit).setExpenseCategory(editParams.get(\"category\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (editParams.containsKey(\"amount\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            double amount;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                amount \u003d Double.parseDouble(editParams.get(\"amount\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                throw new MoneyTrackerException(\"Amount should be a number. E.g. 3000.00\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            if (amount \u003c 0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                throw new MoneyTrackerException(\"Amount should not be a negative number.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            transactionToEdit.setAmount(amount);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (editParams.containsKey(\"date\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            transactionToEdit.setDate(editParams.get(\"date\"));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (editParams.containsKey(\"description\")) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            transactionToEdit.setDescription(editParams.get(\"description\"));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0260222": 106
    }
  },
  {
    "path": "src/main/java/moneytracker/command/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.summary.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.CategoryList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.TransactionList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * Contains the methods for user to exit Money Tracker."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Executes the exit command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param categories List of \u003ccode\u003eCategory\u003c/code\u003e objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param budget \u003ccode\u003eBudget\u003c/code\u003e object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public void execute(TransactionList transactions, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                        CategoryList categories, Budget budget) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        ui.printGoodbye();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Returns true so that Money Tracker will exist after this command is executed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daiweinus": 1,
      "e0260222": 34
    }
  },
  {
    "path": "src/main/java/moneytracker/command/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.summary.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.CategoryList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.TransactionList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * Contains the method to show the URL of the user guide."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Executes the help command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param categories List of \u003ccode\u003eCategory\u003c/code\u003e objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param budget \u003ccode\u003eBudget\u003c/code\u003e object."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public void execute(TransactionList transactions, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                        CategoryList categories, Budget budget) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        ui.printHelp();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daiweinus": 1,
      "e0260222": 26
    }
  },
  {
    "path": "src/main/java/moneytracker/command/ListCategoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.summary.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "import moneytracker.transaction.CategoryList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.TransactionList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * Contains the methods for user to list all categories."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class ListCategoryCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private final String fullCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Initializes a \u003ccode\u003eListCategoryCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param fullCommand User\u0027s full input string."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public ListCategoryCommand(String fullCommand) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Executes the list categories command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param categories List of \u003ccode\u003eCategory\u003c/code\u003e objects."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param budget \u003ccode\u003eBudget\u003c/code\u003e object."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    public void execute(TransactionList transactions, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                        CategoryList categories, Budget budget) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        categories.setIsInitialized(true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        categories.clearSearchResultIndexes();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        for (int i \u003d 0; i \u003c categories.getSize(); i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            categories.addSearchResultIndex(i);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        int len \u003d this.fullCommand.split(\" \").length;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        String[] lineArr \u003d this.fullCommand.split(\" \", 4);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        assert lineArr.length \u003e\u003d 0 : \"There should be at least 1 element\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        if (len \u003d\u003d 1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            ui.printListCategory(categories);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        } else if ((len \u003d\u003d 2) \u0026 (lineArr[1].toLowerCase().equals(\"/te\"))) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            ui.printListCategoryExpenseOnly(categories);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        } else if ((len \u003d\u003d 2) \u0026 (lineArr[1].toLowerCase().equals(\"/ti\"))) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            ui.printListCategoryIncomeOnly(categories);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            ui.printError(\"Please enter valid command.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daiweinus": 7,
      "dgc5213": 16,
      "e0260222": 34
    }
  },
  {
    "path": "src/main/java/moneytracker/command/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "import moneytracker.exception.MoneyTrackerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.summary.Budget;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.storage.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.TransactionList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "import moneytracker.transaction.Transaction;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "import moneytracker.transaction.Income;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "import moneytracker.transaction.Expense;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "import moneytracker.transaction.CategoryList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.ui.Ui;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * Contains the methods for user to list all transactions."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private final String fullCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    private final String errMsg \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Initializes a \u003ccode\u003eListCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param fullCommand User\u0027s full input string."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public ListCommand(String fullCommand) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Executes the list transactions command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param categories List of \u003ccode\u003eCategory\u003c/code\u003e objects."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param budget \u003ccode\u003eBudget\u003c/code\u003e object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    public void execute(TransactionList transactions, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                        CategoryList categories, Budget budget) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        transactions.setIsInitialized(true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        transactions.clearSearchResultIndexes();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        for (int i \u003d 0; i \u003c transactions.getSize(); i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            transactions.addSearchResultIndex(i);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        String commandParameterString \u003d fullCommand.replaceFirst(\"(?i)list\", \"\").trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        String[] commandParametersArray \u003d commandParameterString.split(\"/\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        String[] rules \u003d new String[commandParametersArray.length];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        for (int i \u003d 0; i \u003c commandParametersArray.length; i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            rules[i] \u003d commandParametersArray[i].trim();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        ArrayList\u003cTransaction\u003e filteredTransaction \u003d transactions.getTransactions();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        if (transactions.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            throw new MoneyTrackerException(\"Sorry, there is no transaction in your list.\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        assert commandParameterString.isBlank() : \"Command Parameter is blank, so execute list all function\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        /// When there is only one keyword: list, so the commandParameterString is Empty."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        /// We have to execute list all records. and return to main screen"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        if (commandParameterString.isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            ui.printListTransaction(transactions);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        ///When there are multiple keywords in the list command, we have to check each rule and return matched records"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        for (int i \u003d 1; i \u003c rules.length; i++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            filteredTransaction \u003d getFilteredList(filteredTransaction, rules[i].trim());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        ui.printMyFilteredTransactions(filteredTransaction);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     * Gets a list of transactions which satisfies filter requirement."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     * @param transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     * @param rule String of rule provided by the user input."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    protected ArrayList\u003cTransaction\u003e  getFilteredList(ArrayList\u003cTransaction\u003e transactions, String rule)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            throws MoneyTrackerException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        if (rule.equals(\"te\")) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            ArrayList\u003cTransaction\u003e filterByExpense \u003d (ArrayList\u003cTransaction\u003e) transactions.stream().filter(record -\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                    record instanceof Expense).collect(Collectors.toList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            if (filterByExpense.size() \u003c 1) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                throw new MoneyTrackerException(\"Sorry, there is no expense in your list.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            return filterByExpense;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        } else if (rule.equals(\"ti\")) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            ArrayList\u003cTransaction\u003e filterByIncome \u003d (ArrayList\u003cTransaction\u003e) transactions.stream().filter(record -\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                    record instanceof Income).collect(Collectors.toList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            if (filterByIncome.size() \u003c 1) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                throw new MoneyTrackerException(\"Sorry, there is no income in your list.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            return filterByIncome;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        }  else if (rule.startsWith(\"c\")) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            String inputCategory \u003d rule.replace(\"c\", \"\").trim().toUpperCase();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            ArrayList\u003cTransaction\u003e expenseList \u003d (ArrayList\u003cTransaction\u003e) transactions.stream().filter(record -\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                    record instanceof Expense)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                    .filter(record -\u003e ((Expense) record).getExpenseCategory().equals(inputCategory))"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                    .collect(Collectors.toList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            ArrayList\u003cTransaction\u003e incomeList \u003d (ArrayList\u003cTransaction\u003e) transactions.stream().filter(record"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                -\u003e record instanceof Income).filter(record -\u003e ((Income) record)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                    .getIncomeCategory().equals(inputCategory)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            ArrayList\u003cTransaction\u003e filteredByCategory \u003d new ArrayList\u003c\u003e(expenseList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            filteredByCategory.addAll(incomeList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            if (incomeList.size() \u003c 1 \u0026\u0026 expenseList.size() \u003c 1) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                throw new MoneyTrackerException(\"Sorry, there is no category \u0027\" + inputCategory + \"\u0027 in the list.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            return filteredByCategory;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        } else if (rule.startsWith(\"m\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            String inputMonth \u003d rule.replace(\"m\", \"\").trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            ArrayList\u003cTransaction\u003e filterByMonthList \u003d (ArrayList\u003cTransaction\u003e) transactions.stream().filter(record"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                -\u003e record.setMonth().equals(inputMonth)).collect(Collectors.toList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            if (filterByMonthList.size() \u003c 1) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                throw new MoneyTrackerException(\"Sorry, there is no record for \u0027\" +  inputMonth + \"\u0027.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            return filterByMonthList;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        throw new MoneyTrackerException((\"Sorry, invalid list command.\"));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dgc5213": 102,
      "e0260222": 34
    }
  },
  {
    "path": "src/main/java/moneytracker/command/ReportCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import moneytracker.exception.MoneyTrackerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import moneytracker.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.summary.Budget;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.storage.Storage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.CategoryList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.TransactionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.ui.Ui;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * Contains the methods for user to generate summary report."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class ReportCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private final String fullCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Initializes a \u003ccode\u003eReportCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param fullCommand User\u0027s full input string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public ReportCommand(String fullCommand) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Executes the display report command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param categories List of \u003ccode\u003eCategory\u003c/code\u003e objects."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param budget \u003ccode\u003eBudget\u003c/code\u003e object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public void execute(TransactionList transactions, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "                        CategoryList categories,  Budget budget) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        assert !fullCommand.isBlank() : \"fullCommand should not be blank\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        String date \u003d fullCommand.replaceFirst(\"report\", \"\").trim();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        if (date.isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            ui.printReport(transactions, Parser.getLastSixMon());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            ui.printReportByMonth(transactions, Parser.getDate(fullCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daiweinus": 11,
      "e0260222": 35
    }
  },
  {
    "path": "src/main/java/moneytracker/command/UnknownCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.summary.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.storage.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.CategoryList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.TransactionList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * Contains the method to inform user if the command is invalid."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class UnknownCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Executes the invalid input command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param ui \u003ccode\u003eUi\u003c/code\u003e object for displaying user interactions."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param storage \u003ccode\u003eStorage\u003c/code\u003e object for loading and saving user data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param categories List of \u003ccode\u003eCategory\u003c/code\u003e objects."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param budget \u003ccode\u003eBudget\u003c/code\u003e object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public void execute(TransactionList transactions, Ui ui, Storage storage,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                        CategoryList categories, Budget budget) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        ui.printError(\"I\u0027m sorry, I don\u0027t know what that means.\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daiweinus": 1,
      "e0260222": 27
    }
  },
  {
    "path": "src/main/java/moneytracker/command/Utilities.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.exception.MoneyTrackerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.Expense;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.Income;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.Transaction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.TransactionList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class Utilities {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Gets the type of a \u003ccode\u003eTransaction\u003c/code\u003e object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param transaction \u003ccode\u003eTransaction\u003c/code\u003e object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @return Type of a \u003ccode\u003eTransaction\u003c/code\u003e object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If the type of a transaction is invalid."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public static String getTransactionType(Transaction transaction) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String type;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (transaction instanceof Income) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            type \u003d \"INCOME\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } else if (transaction instanceof Expense) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            type \u003d \"EXPENSE\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"The type is invalid\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Gets a \u003ccode\u003eTransaction\u003c/code\u003e based on the index listed by the list command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param transactions A \u003ccode\u003eTransactionList\u003c/code\u003e object."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @return \u003ccode\u003eTransaction\u003c/code\u003e object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If the index of the transaction is invalid."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public static Transaction getTransaction(TransactionList transactions, int index) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        Transaction transaction;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            transaction \u003d transactions.getTransaction(transactions.getSearchResultIndex(index));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"The index is invalid.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return transaction;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0260222": 45
    }
  },
  {
    "path": "src/main/java/moneytracker/exception/MoneyTrackerException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * Overrides the Exception class\u0027s constructor to implement"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * custom error messages for user-defined exceptions."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class MoneyTrackerException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public MoneyTrackerException(String errorMessage) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dgc5213": 1,
      "e0260222": 11
    }
  },
  {
    "path": "src/main/java/moneytracker/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.command.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.command.AddExpenseCategoryCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.command.AddIncomeCategoryCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.command.HelpCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.command.ListCategoryCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.command.DeleteCategoryCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.command.EditCategoryCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.command.AddIncomeCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.command.AddExpenseCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.command.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.command.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.command.DeleteCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.command.ClearCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.command.ReportCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.command.BudgetCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.command.ExitCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.command.UnknownCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.exception.MoneyTrackerException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import moneytracker.transaction.TransactionList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import moneytracker.transaction.Transaction;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.Income;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.Expense;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import moneytracker.transaction.Category;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * Contains methods that deal with parsing user commands to extract meaningful details from them."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Gets the command word from user\u0027s input string."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param fullCommand User\u0027s full input string."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @return Command word from user\u0027s input string."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public static String getCommand(String fullCommand) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return fullCommand.split(\" \")[0];"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Creates an income \u003ccode\u003eCategory\u003c/code\u003e object."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param fullCommand User\u0027s full input string."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @return \u003ccode\u003eCategory\u003c/code\u003e object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If income category is missing."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public static Category createIncomeCategory(String fullCommand) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assert !fullCommand.isBlank() : \"fullCommand should not be blank\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String name \u003d fullCommand.replaceFirst(\"(?i)addcati\", \"\").toUpperCase().trim();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (name.isEmpty()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"The income category name is missing.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return new Category(name, \"INCOME\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Creates an expense \u003ccode\u003eCategory\u003c/code\u003e object."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param fullCommand User\u0027s full input string."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @return \u003ccode\u003eCategory\u003c/code\u003e object."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If expense category is missing."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public static Category createExpenseCategory(String fullCommand) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assert !fullCommand.isBlank() : \"fullCommand should not be blank\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String name \u003d fullCommand.replaceFirst(\"(?i)addcate\", \"\").toUpperCase().trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (name.isEmpty()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"The expense category name is missing.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return new Category(name, \"EXPENSE\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Creates an \u003ccode\u003eIncome\u003c/code\u003e object."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param fullCommand User\u0027s full input string."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @return \u003ccode\u003eIncome\u003c/code\u003e object."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If amount or income category is missing."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public static Income createIncome(String fullCommand) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assert !fullCommand.isBlank() : \"fullCommand should not be blank\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String commandParameterString \u003d fullCommand.replaceFirst(\"(?i)addi\", \"\").trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (commandParameterString.isEmpty()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"The parameters of the command are missing.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        HashMap\u003cString, String\u003e commandParams \u003d getCommandParams(commandParameterString);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (!(commandParams.containsKey(\"amount\"))) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"The amount parameter is missing.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (!(commandParams.containsKey(\"category\"))) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"The income category parameter is missing.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (!(commandParams.containsKey(\"description\"))) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            commandParams.put(\"description\", \"\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        double amount;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            amount \u003d Double.parseDouble(commandParams.get(\"amount\"));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"The amount must be a decimal value. E.g. 30.50\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (amount \u003c 0) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"Amount should not be a negative number.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String description \u003d commandParams.get(\"description\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String date \u003d commandParams.get(\"date\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String incomeCategory \u003d commandParams.get(\"category\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (commandParams.containsKey(\"date\")) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            return new Income(amount, description, date, incomeCategory);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            return new Income(amount, description, incomeCategory);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Creates an \u003ccode\u003eExpense\u003c/code\u003e object."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param fullCommand User\u0027s full input string."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @return \u003ccode\u003eExpense\u003c/code\u003e object."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If amount or expense category is missing."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public static Expense createExpense(String fullCommand) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assert !fullCommand.isBlank() : \"fullCommand should not be blank\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String commandParameterString \u003d fullCommand.replaceFirst(\"(?i)adde\", \"\").trim();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (commandParameterString.isEmpty()) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"The parameters of the command are missing.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        HashMap\u003cString, String\u003e commandParams \u003d getCommandParams(commandParameterString);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (!(commandParams.containsKey(\"amount\"))) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"The amount parameter is missing.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (!(commandParams.containsKey(\"category\"))) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"The expense category parameter is missing.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (!(commandParams.containsKey(\"description\"))) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            commandParams.put(\"description\", \"\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        double amount;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            amount \u003d Double.parseDouble(commandParams.get(\"amount\"));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"The amount must be a decimal value. E.g. 30.50\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (amount \u003c 0) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"Amount should not be a negative number.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String description \u003d commandParams.get(\"description\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String date \u003d commandParams.get(\"date\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String expenseCategory \u003d commandParams.get(\"category\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (commandParams.containsKey(\"date\")) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            return new Expense(amount, description, date, expenseCategory);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            return new Expense(amount, description, expenseCategory);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Gets parameters for editing transaction from user\u0027s full input string."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param fullCommand User\u0027s full input string."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @return Parameters for editing transaction."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If command parameters are missing."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public static HashMap\u003cString, String\u003e getEditTransactionParams(String fullCommand) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String commandParameterString \u003d fullCommand.replaceFirst(\"(?i)edit\", \"\").trim();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (commandParameterString.isEmpty()) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"The command parameters are missing.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        HashMap\u003cString, String\u003e editParameters;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            editParameters \u003d getCommandParams(commandParameterString.split(\" \", 2)[1].trim());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            editParameters.put(\"index\", commandParameterString.split(\" \", 2)[0].trim());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"The command parameters are invalid.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return editParameters;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Gets transaction/category index from user\u0027s full input string."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param fullCommand User\u0027s full input string."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @return Index of transaction/category."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If index is missing or invalid."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public static int getDeleteIndex(String fullCommand) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String commandParameterString \u003d"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                fullCommand.replaceFirst(\"(?i)deletecat\", \"\")"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                        .replaceFirst(\"(?i)delete\", \"\").trim();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (commandParameterString.isEmpty()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"The index is missing.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            index \u003d Integer.parseInt(commandParameterString);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"The index is invalid.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return index - 1;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Gets parameters for editing category from user\u0027s full input string."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param fullCommand User\u0027s full input string."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @return Parameters for editing category."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If index is missing or invalid."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public static String[] getEditCategoryParams(String fullCommand) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String commandParameterString \u003d fullCommand.replaceFirst(\"(?i)editcat\", \"\").trim();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (commandParameterString.isEmpty()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"The index is missing.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String[] editParameters \u003d commandParameterString.split(\"/n\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        for (int i \u003d 0; i \u003c editParameters.length; i++) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            editParameters[i] \u003d editParameters[i].trim();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return editParameters;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public static double getBudgetAmount(String fullCommand) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String commandParameterString \u003d fullCommand.replaceFirst(\"(?i)budget\", \"\").trim();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (commandParameterString.isEmpty()) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"The amount is missing.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        double amount;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            amount \u003d Double.parseDouble(commandParameterString);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"Amount should be a number. E.g. 3000.00\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (amount \u003c 0) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"Amount should not be a negative number.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Gets \u003ccode\u003eCommand\u003c/code\u003e object from user\u0027s full input string."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param fullCommand User\u0027s full input string."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @return \u003ccode\u003eCommand\u003c/code\u003e object."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public static Command parse(String fullCommand) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String command \u003d getCommand(fullCommand).toLowerCase();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        switch (command) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        case \"help\":"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        case \"addcati\":"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            return new AddIncomeCategoryCommand(fullCommand);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        case \"addcate\":"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            return new AddExpenseCategoryCommand(fullCommand);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        case \"listcat\":"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            return new ListCategoryCommand(fullCommand);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        case \"deletecat\":"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            return new DeleteCategoryCommand(fullCommand);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        case \"editcat\":"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            return new EditCategoryCommand(fullCommand);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        case \"addi\":"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            return new AddIncomeCommand(fullCommand);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        case \"adde\":"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            return new AddExpenseCommand(fullCommand);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        case \"list\":"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            return new ListCommand(fullCommand);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            return new DeleteCommand(fullCommand);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        case \"edit\":"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            return new EditCommand(fullCommand);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        case \"clear\":"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        case \"report\":"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            return new ReportCommand(fullCommand);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        case \"budget\":"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            return new BudgetCommand(fullCommand);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        case \"exit\":"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            return new UnknownCommand();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private static HashMap\u003cString, String\u003e getCommandParams(String commandParameterString) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assert !commandParameterString.isBlank() : \"commandParameterString should not be blank\";"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        HashMap\u003cString, String\u003e commandParamsMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String[] commandParamsArray \u003d commandParameterString.split(\"/\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        for (String commandParam : commandParamsArray) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            if (commandParam.startsWith(\"a\")) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                commandParamsMap.put(\"amount\", commandParam.substring(1).trim());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            } else if (commandParam.startsWith(\"c\")) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                commandParamsMap.put(\"category\", commandParam.substring(1).toUpperCase().trim());"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            } else if (commandParam.startsWith(\"d\")) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                commandParamsMap.put(\"date\", commandParam.substring(1).trim());"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            } else if (commandParam.startsWith(\"e\")) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                commandParamsMap.put(\"description\", commandParam.substring(1).trim());"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return commandParamsMap;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Gets date from user\u0027s full input string."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param fullCommand User\u0027s full input string."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @return date from user\u0027s input string."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @throws MoneyTrackerException if date format incorrect."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public static String getDate(String fullCommand) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        assert !fullCommand.isBlank() : \"fullCommand should not be blank\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        String date \u003d fullCommand.replaceFirst(\"report\", \"\").trim();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        if (date.isEmpty()) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            throw new MoneyTrackerException(\"Date should be in yyyy-MM format. E.g. 2020-09\");"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            DateFormat dateFormat \u003d new SimpleDateFormat(\"yyyy-MM\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            dateFormat.setLenient(false);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "                dateFormat.parse(date);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            } catch (ParseException e) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "                throw new MoneyTrackerException(\"Date should be in yyyy-MM format. E.g. 2020-09\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Gets last six months name from system date."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @return last six months name list."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public static List\u003cString\u003e getLastSixMon() {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        List\u003cString\u003e months \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        for (int i \u003d 5; i \u003e\u003d 0; i--) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            months.add(LocalDate.now().minusMonths(i).format(DateTimeFormatter.ofPattern(\"yyyy-MM\")));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        return months;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Gets days of month from user full command string input."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param date date month of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @return days of month"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public static int getDaysOfMonth(String date) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        int year \u003d Integer.parseInt(date.split(\"-\")[0]) - 1900;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        int month \u003d Integer.parseInt(date.split(\"-\")[1]) - 1;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        Calendar calendar \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        calendar.set(Calendar.YEAR, year);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        calendar.set(Calendar.MONTH, month);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        return calendar.getActualMaximum(Calendar.DATE);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Gets total month income transactions from user\u0027s full input string."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param transactions transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param date date date month of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @return total month income of transactions"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public static double getTotalIncome(TransactionList transactions, String date) {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        double totalIncome \u003d 0.00;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        for (int i \u003d 0; i \u003c transactions.getSize(); i++) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            Transaction temp \u003d transactions.getTransaction(i);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            double amount \u003d Double.parseDouble(transactions.getTransaction(i).getAmount());"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            if (temp instanceof Income \u0026 transactions.getTransaction(i).setMonth().equals(date)) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "                totalIncome \u003d totalIncome + amount;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        return round(totalIncome,2);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Gets total month expense transactions from user\u0027s full input string."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param transactions transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param date date date month of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @return total month expense of transactions"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public static double getTotalExpense(TransactionList transactions, String date) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        double totalExpense \u003d 0.00;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        for (int i \u003d 0; i \u003c transactions.getSize(); i++) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            Transaction temp \u003d transactions.getTransaction(i);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            double amount \u003d Double.parseDouble(transactions.getTransaction(i).getAmount());"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            if (temp instanceof Expense \u0026 transactions.getTransaction(i).setMonth().equals(date)) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "                totalExpense \u003d totalExpense + amount;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        return round(totalExpense,2);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Gets round double to 2 decimal places."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param value double"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param places decimal places"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @return double"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public static double round(double value, int places) {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        if (places \u003c 0) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        BigDecimal bd \u003d BigDecimal.valueOf(value);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        bd \u003d bd.setScale(places, RoundingMode.HALF_UP);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        return bd.doubleValue();"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Gets highest month income transactions from user\u0027s full input string."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param transactions transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param date date date month of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @return highest month income of transactions"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public static String getHighestIncome(TransactionList transactions, String date) {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        double highestIncome \u003d 0.00;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        String highestIncomes \u003d null;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        for (int i \u003d 0; i \u003c transactions.getSize(); i++) {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            Transaction temp \u003d transactions.getTransaction(i);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            double amount \u003d Double.parseDouble(transactions.getTransaction(i).getAmount());"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            if (temp instanceof Income \u0026 transactions.getTransaction(i).setMonth().equals(date)) {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "                if (highestIncome \u003c amount) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "                    highestIncomes \u003d temp.toString();"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "                    highestIncome \u003d amount;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        if (highestIncomes \u003d\u003d null || highestIncomes.isEmpty()) {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            return (\"  Sorry, Cannot find any Income record in this Month.\");"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            return highestIncomes;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Gets highest month expense transactions from user\u0027s full input string."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param transactions transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param date date date month of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @return highest month expense of transactions"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public static String getHighestExpense(TransactionList transactions, String date) {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        double highestExpense \u003d 0.00;"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        String highestExpenses \u003d null;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        for (int i \u003d 0; i \u003c transactions.getSize(); i++) {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            Transaction temp \u003d transactions.getTransaction(i);"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            double amount \u003d Double.parseDouble(transactions.getTransaction(i).getAmount());"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            if (temp instanceof Expense \u0026 transactions.getTransaction(i).setMonth().equals(date)) {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "                if (highestExpense \u003c amount) {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "                    highestExpenses \u003d temp.toString();"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "                    highestExpense \u003d amount;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "                }"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        if (highestExpenses \u003d\u003d null || highestExpenses.isEmpty()) {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            return (\"  Sorry, Cannot find any Expense record in this Month.\");"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            return highestExpenses;"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Gets frequent month income category from user\u0027s full input string."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param transactions transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param date date date month of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public static void getInCatFreq(TransactionList transactions, String date) {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        ArrayList\u003cString\u003e incomeCate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        for (int i \u003d 0; i \u003c transactions.getSize(); i++) {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            Transaction temp \u003d transactions.getTransaction(i);"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            if (temp instanceof Income \u0026 transactions.getTransaction(i).setMonth().equals(date)) {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "                incomeCate.add(temp.getTypeName(temp.toString()));"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        if (incomeCate.isEmpty()) {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            System.out.println(\"  Sorry, Cannot find any Income Category record in this Month.\");"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            printFreqInHelper(getFrequency(incomeCate));"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Gets frequent month expense category from user\u0027s full input string."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param transactions transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param date date date month of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public static void getExpCatFreq(TransactionList transactions, String date) {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        ArrayList\u003cString\u003e expCate \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        for (int i \u003d 0; i \u003c transactions.getSize(); i++) {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            Transaction temp \u003d transactions.getTransaction(i);"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            if (temp instanceof Expense \u0026 transactions.getTransaction(i).setMonth().equals(date)) {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "                expCate.add(temp.getTypeName(temp.toString()));"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        if (expCate.isEmpty()) {"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            System.out.println(\"  Sorry, Cannot find any Expense Category record in this Month.\");"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            printFreqExpHelper(getFrequency(expCate));"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Gets list elements frequency with descending order."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param list arraylist"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @return map object with list elements and frequency."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public static Map\u003cString, Long\u003e getFrequency(ArrayList\u003cString\u003e list) {"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        Map\u003cString, Long\u003e unsortMap \u003d list.stream().collect(Collectors.groupingBy(w -\u003e w, Collectors.counting()));"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        return new TreeMap\u003c\u003e(unsortMap);"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Help slip frequency string to words."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param object income/expense category frequency."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public static void printInHelper(Object object) {"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        String line \u003d object.toString();"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        String newline \u003d line.replace(\"{\",\"\")"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "                .replace(\"}\",\"\").replace(\",\",\"\");"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        for (String word : newline.split(\" \")) {"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            word \u003d word.replace(\"\u003d\",\" $\");"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            System.out.println(\"  [I] \" + word);"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Help slip frequency string to words."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param object income/expense category frequency."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public static void printFreqInHelper(Object object) {"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        String line \u003d object.toString();"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        String newline \u003d line.replace(\"{\",\"\")"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "                .replace(\"}\",\"\").replace(\",\",\"\");"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        for (String word : newline.split(\" \")) {"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            word \u003d word.replace(\"\u003d\",\": \");"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            System.out.println(\"  [I] \" + word);"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Help slip frequency string to words."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param object income/expense category frequency."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public static void printExpHelper(Object object) {"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        String line \u003d object.toString();"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        String newline \u003d line.replace(\"{\",\"\")"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "                .replace(\"}\",\"\").replace(\",\",\"\");"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        for (String word : newline.split(\" \")) {"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            word \u003d word.replace(\"\u003d\",\" $\");"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            System.out.println(\"  [E] \" + word);"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Help slip frequency string to words."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param object income/expense category frequency."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public static void printFreqExpHelper(Object object) {"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        String line \u003d object.toString();"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        String newline \u003d line.replace(\"{\",\"\")"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "                .replace(\"}\",\"\").replace(\",\",\"\");"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        for (String word : newline.split(\" \")) {"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            word \u003d word.replace(\"\u003d\",\": \");"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            System.out.println(\"  [E] \" + word);"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Get income category list elements amount with descending order."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param transactions transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param date date date month of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public static void getInCatAmount(TransactionList transactions, String date) {"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        Map\u003cString, Double\u003e incomeCate \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        double sum \u003d 0;"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        for (int i \u003d 0; i \u003c transactions.getSize(); i++) {"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            Transaction temp \u003d transactions.getTransaction(i);"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            double amount \u003d Double.parseDouble(transactions.getTransaction(i).getAmount());"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            if (temp instanceof Income \u0026 transactions.getTransaction(i).setMonth().equals(date)) {"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "                incomeCate.merge(temp.getTypeName(temp.toString()), sum + amount, Double::sum);"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        if (incomeCate.isEmpty()) {"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            System.out.println(\"  Sorry, Cannot find any Income Category record in this Month.\");"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            printInHelper(sortHelper(incomeCate));"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Get expense list elements amount with descending order."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param transactions transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param date date date month of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public static void getExpCatAmount(TransactionList transactions, String date) {"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        Map\u003cString, Double\u003e expCate \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        double sum \u003d 0;"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        for (int i \u003d 0; i \u003c transactions.getSize(); i++) {"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            Transaction temp \u003d transactions.getTransaction(i);"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            double amount \u003d Double.parseDouble(transactions.getTransaction(i).getAmount());"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            if (temp instanceof Expense \u0026 transactions.getTransaction(i).setMonth().equals(date)) {"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "                expCate.merge(temp.getTypeName(temp.toString()), sum + amount, Double::sum);"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            }"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        if (expCate.isEmpty()) {"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            System.out.println(\"  Sorry, Cannot find any Expense Category record in this Month.\");"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            printExpHelper(sortHelper(expCate));"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Help sort income/expense category Map object."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param object unsort income/expense category Map object."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @return sorted object Map"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public static Object sortHelper(Map\u003cString, Double\u003e object) {"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        return object.entrySet().stream()"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "                .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "                .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue,"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "                    (oldValue, newValue) -\u003e oldValue, LinkedHashMap::new));"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Gets last six months income transactions with descent order."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param transactions transactions transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param dates last six months list"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @return sorted object list"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public static Object getSixMonIncome(TransactionList transactions, List\u003cString\u003e dates) {"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        Map\u003cString, Double\u003e monthInAmount \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        for (String date:dates) {"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            monthInAmount.put(date,Parser.getTotalIncome(transactions, date));"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        return Parser.sortHelper(monthInAmount);"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Gets last six months expense transactions with descent order."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param transactions transactions transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param dates last six months list"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @return sorted object list"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public static Object getSixMonExpense(TransactionList transactions, List\u003cString\u003e dates) {"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        Map\u003cString, Double\u003e monthExpAmount \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        for (String date:dates) {"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            monthExpAmount.put(date,Parser.getTotalExpense(transactions, date));"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        return Parser.sortHelper(monthExpAmount);"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daiweinus": 408,
      "e0260222": 288
    }
  },
  {
    "path": "src/main/java/moneytracker/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.summary.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.exception.MoneyTrackerException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.Category;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.CategoryList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.Income;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.Transaction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.TransactionList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private static final Logger logger \u003d Logger.getLogger(Logger.GLOBAL_LOGGER_NAME);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private final String transactionsFilePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private final String categoriesFilePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private final String budgetFilePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Initializes a \u003ccode\u003eStorage\u003c/code\u003e object."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param transactionsFilePath Path of the text file used for storing transactions."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param categoriesFilePath Path of the text file used for storing categories."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public Storage(String transactionsFilePath, String categoriesFilePath, String budgetFilePath) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.transactionsFilePath \u003d transactionsFilePath;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.categoriesFilePath \u003d categoriesFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.budgetFilePath \u003d budgetFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Loads information of all \u003ccode\u003eTransaction\u003c/code\u003e objects from text file."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public ArrayList\u003cTransaction\u003e loadTransactions(String filePath) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        ArrayList\u003cTransaction\u003e transactions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        ArrayList\u003cString\u003e lines;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            lines \u003d getLines(filePath);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"I have problem reading the transactions save file.\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                    + \" Let\u0027s start with an empty transaction list instead.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        for (String line : lines) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            if (!(line.trim().isEmpty())) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                transactions.add(createTransaction(line));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return transactions;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Loads information of all categories from text file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public ArrayList\u003cCategory\u003e loadCategories(String filePath) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        ArrayList\u003cCategory\u003e categories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        ArrayList\u003cString\u003e lines;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            lines \u003d getLines(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"I have problem reading the categories save file.\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                    + \" Let\u0027s start with an empty category list instead.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        for (String line : lines) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            if (!(line.trim().isEmpty())) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                categories.add(createCategory(line));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return categories;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Saves information of all \u003ccode\u003eTransaction\u003c/code\u003e objects to text file."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If text file is not found or inaccessible."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void saveTransactions(TransactionList transactions) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        FileWriter fw;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            fw \u003d new FileWriter(transactionsFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            for (int i \u003d 0; i \u003c transactions.getSize(); i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                String description \u003d transactions.getTransaction(i).getDescription();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                String amount \u003d transactions.getTransaction(i).getAmount();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                String date \u003d transactions.getTransaction(i).getDate();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                String lineToSave \u003d \" | \" + amount + \" | \" + date + \" | \" + description;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                if (transactions.getTransaction(i) instanceof Income) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                    String incomeCategory \u003d ((Income) transactions.getTransaction(i)).getIncomeCategory();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                    lineToSave \u003d  \"I\" + lineToSave + \" | \" + incomeCategory + System.lineSeparator();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                } else if (transactions.getTransaction(i) instanceof Expense) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                    String expenseCategory \u003d ((Expense) transactions.getTransaction(i)).getExpenseCategory();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                    lineToSave \u003d  \"E\" + lineToSave + \" | \" + expenseCategory + System.lineSeparator();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                    throw new MoneyTrackerException(\"I have problem saving to the file.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                fw.write(lineToSave);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"I have problem saving to the file.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Saves information of all categories to text file."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If text file is not found or inaccessible."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void saveCategories(CategoryList categories) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        FileWriter fw;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            fw \u003d new FileWriter(categoriesFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            for (int i \u003d 0; i \u003c categories.getSize(); i++) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                String name \u003d categories.getCategory(i).getName();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                String type \u003d categories.getCategory(i).getType();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                if (type.equals(\"INCOME\")) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                    fw.write(\"I\" + \" | \" + name + System.lineSeparator());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                } else if (type.equals(\"EXPENSE\")) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                    fw.write(\"E\" + \" | \" + name + System.lineSeparator());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                    throw new MoneyTrackerException(\"I have problem saving to the file.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"I have problem saving to the file.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Saves information of \u003ccode\u003eBudget\u003c/code\u003e object to text file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If text file is not found or inaccessible."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void saveBudget(Budget budget) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        FileWriter fw;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            fw \u003d new FileWriter(budgetFilePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            fw.write(String.valueOf(budget.getAmount()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"I have problem saving to the file.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Loads information of \u003ccode\u003eBudget\u003c/code\u003e object from text file."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If text file is not found or inaccessible."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public Double loadBudget(String filePath) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        ArrayList\u003cString\u003e lines;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            lines \u003d getLines(filePath);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"I have problem reading the budget save file.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        Double budget;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            budget \u003d Double.valueOf(lines.get(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (NumberFormatException | IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"I have problem reading the budget save file.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return budget;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Clear information in all text files."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If text file is not found or inaccessible."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void clearAllData() throws MoneyTrackerException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        clearDataInFile(transactionsFilePath);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        clearDataInFile(categoriesFilePath);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        clearDataInFile(budgetFilePath);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Clear information in a specified text file."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If text file is not found or inaccessible."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private void clearDataInFile(String filePath) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            if (filePath.equals(budgetFilePath)) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                fw.write(\"0.0\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"I have problem clearing data in this file: \" + filePath);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private ArrayList\u003cString\u003e getLines(String filePath) throws IOException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            result.add(s.nextLine());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private Category createCategory(String line) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String type \u003d \"\";"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String name \u003d \"\";"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            type \u003d line.split(\"\\\\|\")[0].trim();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            name \u003d line.split(\"\\\\|\")[1].trim();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            logger.log(Level.SEVERE, \"Error reading categories.txt\", e);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            System.exit(1);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (type.equals(\"I\")) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            return new Category(name, \"INCOME\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } else if (type.equals(\"E\")) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            return new Category(name, \"EXPENSE\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"There is invalid data in the save file.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private Transaction createTransaction(String line) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String transactionType \u003d \"\";"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String amount \u003d \"\";"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String date \u003d \"\";"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String description \u003d \"\";"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String category \u003d \"\";"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            transactionType \u003d line.split(\"\\\\|\")[0].trim();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            amount \u003d line.split(\"\\\\|\")[1].trim();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            date \u003d line.split(\"\\\\|\")[2].trim();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            description \u003d line.split(\"\\\\|\")[3].trim();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            category \u003d line.split(\"\\\\|\")[4].trim();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            logger.log(Level.SEVERE, \"Error reading transactions.txt\", e);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            System.exit(1);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        switch (transactionType) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        case \"I\":"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            return new Income(Double.parseDouble(amount), description, date, category);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            return new Expense(Double.parseDouble(amount), description, date, category);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"There is invalid data in the save file.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Creates the directory for save files."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If the creation of file directory fails."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void createDirectory() throws MoneyTrackerException {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            Path path \u003d Paths.get(\"data/\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            if (!(Files.exists(path))) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                Files.createDirectory(path);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                clearAllData();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"I have problem creating the save directory!\");"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daiweinus": 1,
      "e0260222": 273
    }
  },
  {
    "path": "src/main/java/moneytracker/summary/Budget.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.summary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * Represents the monthly budget. A \u003ccode\u003eBudget\u003c/code\u003e object has a double variable"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * that indicates the amount of this budget."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private double amount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Initializes a \u003ccode\u003eBudget\u003c/code\u003e object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public Budget() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        amount \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Initializes a \u003ccode\u003eBudget\u003c/code\u003e object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param amount Amount in a \u003ccode\u003eBudget\u003c/code\u003e."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public Budget(Double amount) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public Budget(String s) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Gets the amount of a \u003ccode\u003eBudget\u003c/code\u003e."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @return Amount of a \u003ccode\u003eBudget\u003c/code\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public double getAmount() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Sets the amount of a \u003ccode\u003eBudget\u003c/code\u003e."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void setBudget(Double amount) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "     * Calculate the percentage exceed of \u003ccode\u003eexpense\u003c/code\u003e."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "    public String calPercentage(double expense) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "        double percentage \u003d expense / amount;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "        if (percentage \u003e\u003d 0 \u0026 percentage \u003c 0.5) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "            return \"0\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "        } else if (percentage \u003e\u003d 0.5 \u0026 percentage \u003c 0.75) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "            return \"50%\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "        } else if (percentage \u003e\u003d 0.75 \u0026 percentage \u003c 1) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "            return \"75%\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "            return \"100%\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0260222": 44,
      "Chenduo1412": 17
    }
  },
  {
    "path": "src/main/java/moneytracker/summary/Summary.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "package moneytracker.summary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "import moneytracker.transaction.Expense;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "import moneytracker.transaction.Income;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "import moneytracker.transaction.Transaction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "import moneytracker.transaction.TransactionList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "public class Summary {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "     * Calculates the Summary for \u003ccode\u003eincome\u003c/code\u003e."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "    public static double calIncSummary(TransactionList transactions) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "        double inc \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "        for (Transaction tran : transactions.getTransactions()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "            if (LocalDate.now().getMonth() \u003d\u003d tran.getLocalDate().getMonth()) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "                if (tran instanceof Income) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "                    inc +\u003d tran.getAmountNumber();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "                }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "        return inc;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "     * Calculates the Summary of \u003ccode\u003eexpense\u003c/code\u003e."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "    public static double calExpSummary(TransactionList transactions) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "        double exp \u003d 0;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "        for (Transaction tran : transactions.getTransactions()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "            if (LocalDate.now().getMonth() \u003d\u003d tran.getLocalDate().getMonth()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "                if (tran instanceof Expense) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "                    exp +\u003d tran.getAmountNumber();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "                }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "        return exp;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Chenduo1412": 45
    }
  },
  {
    "path": "src/main/java/moneytracker/transaction/Category.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * Represents a category for grouping incomes and expenses."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * A \u003ccode\u003eCategory\u003c/code\u003e object has a name and type indicating whether"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * it is an income or expense."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class Category {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Initializes a \u003ccode\u003eCategory\u003c/code\u003e object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param name Name of a \u003ccode\u003eCategory\u003c/code\u003e."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param type Type of a \u003ccode\u003eCategory\u003c/code\u003e, either INCOME or EXPENSE."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public Category(String name, String type) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assert type.equals(\"INCOME\") || type.equals(\"EXPENSE\") : \"type should be INCOME or EXPENSE\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Gets the name of a \u003ccode\u003eCategory\u003c/code\u003e."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @return Name of a \u003ccode\u003eCategory\u003c/code\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Sets the name of a \u003ccode\u003eCategory\u003c/code\u003e."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void setName(String name) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Gets the type of a \u003ccode\u003eCategory\u003c/code\u003e."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @return Type of a \u003ccode\u003eCategory\u003c/code\u003e."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public String getType() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Gets the String representation of a \u003ccode\u003eCategory\u003c/code\u003e."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String symbol \u003d \"\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (type.equals(\"INCOME\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            symbol \u003d \"[I] \";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } else if (type.equals(\"EXPENSE\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            symbol \u003d \"[E] \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return symbol + name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daiweinus": 10,
      "e0260222": 52
    }
  },
  {
    "path": "src/main/java/moneytracker/transaction/CategoryList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "package moneytracker.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "import moneytracker.exception.MoneyTrackerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * Manages the in-memory category list. It contains an ArrayList that stores"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * individual \u003ccode\u003eCategory\u003c/code\u003e objects and methods to perform operations"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * such as adding and deleting categories."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "public class CategoryList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private ArrayList\u003cCategory\u003e categories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    private final ArrayList\u003cInteger\u003e searchResultIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    private boolean isInitialized \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     * Initializes an empty \u003ccode\u003eCategoryList\u003c/code\u003e object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    public CategoryList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     * Initializes a \u003ccode\u003eCategoryList\u003c/code\u003e object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     * @param categories List of categories."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    public CategoryList(ArrayList\u003cCategory\u003e categories) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.categories \u003d categories;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Gets a \u003ccode\u003eCategory\u003c/code\u003e from the \u003ccode\u003eCategoryList\u003c/code\u003e."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param index Index of an \u003ccode\u003eCategory\u003c/code\u003e in the \u003ccode\u003eCategoryList\u003c/code\u003e."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @return List of categories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    public Category getCategory(int index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return categories.get(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Gets the size of a \u003ccode\u003eCategoryList\u003c/code\u003e."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @return Size of a \u003ccode\u003eCategoryList\u003c/code\u003e."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return categories.size();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Adds a \u003ccode\u003eCategory\u003c/code\u003e to the \u003ccode\u003eCategoryList\u003c/code\u003e."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param category A \u003ccode\u003eCategory\u003c/code\u003e to be added."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    public void addCategory(Category category) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        if (!checkIfCategoryExists(category.getName(), category.getType())) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            categories.add(category);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            throw new MoneyTrackerException(\"This category already exists.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Removes a \u003ccode\u003eCategory\u003c/code\u003e from the \u003ccode\u003eCategoryList\u003c/code\u003e."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param index Index of a \u003ccode\u003eCategory\u003c/code\u003e in \u003ccode\u003eCategoryList\u003c/code\u003e."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     * @throws MoneyTrackerException If index is invalid."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    public void removeCategory(int index) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            categories.remove(categories.get(index));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            throw new MoneyTrackerException(\"Invalid index\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Checks whether a category already exists in \u003ccode\u003eCategoryList\u003c/code\u003e."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     * @param name Name of the category."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     * @param type Type of the category."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    public boolean checkIfCategoryExists(String name, String type) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        for (Category category : categories) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            if (name.toUpperCase().equals(category.getName()) \u0026\u0026 type.toUpperCase().equals(category.getType())) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Gets the status of whether the listcat command has been used."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public boolean getIsInitialized() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return isInitialized;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Sets the status that the listcat command has just been used."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    public void setIsInitialized(boolean isInitialized) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        this.isInitialized \u003d isInitialized;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Adds index for a particular category listed by the listcat command."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param searchResultIndex Index of category listed by the listcat command."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void addSearchResultIndex(int searchResultIndex) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        searchResultIndexes.add(searchResultIndex);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Clears the indexes from the listcat command."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    public void clearSearchResultIndexes() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        searchResultIndexes.clear();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Gets the indexes from the listcat command."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    public ArrayList\u003cInteger\u003e getSearchResultIndexes() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        return searchResultIndexes;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Gets the index for a particular category listed by the listcat command."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public int getSearchResultIndex(int resultIndex) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return searchResultIndexes.get(resultIndex);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Clears the \u003ccode\u003eCategoryList\u003c/code\u003e."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void clearCategories() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        categories.clear();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dgc5213": 88,
      "e0260222": 54
    }
  },
  {
    "path": "src/main/java/moneytracker/transaction/Expense.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.exception.MoneyTrackerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * Represents an expense that a user has incurred. An \u003ccode\u003eExpense\u003c/code\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * object has an amount, a description, a date and a category."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class Expense extends Transaction {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private String expenseCategory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Initializes an \u003ccode\u003eExpense\u003c/code\u003e object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param amount Amount of money of an expense."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param description Description of an expense."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param date Date of an expense."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public Expense(double amount, String description,String date,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                   String expenseCategory) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        super(amount, description, date);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.expenseCategory \u003d expenseCategory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Initializes an \u003ccode\u003eExpense\u003c/code\u003e object."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param amount Amount of money of an expense."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param description Description of an expense."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public Expense(double amount, String description, String expenseCategory) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        super(amount, description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.expenseCategory \u003d expenseCategory;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Gets the category of an \u003ccode\u003eExpense\u003c/code\u003e object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @return Category of an \u003ccode\u003eExpense\u003c/code\u003e object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public String getExpenseCategory() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return expenseCategory;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Sets the category of an \u003ccode\u003eExpense\u003c/code\u003e object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void setExpenseCategory(String expenseCategory) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.expenseCategory \u003d expenseCategory;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Gets the String representation of an \u003ccode\u003eExpense\u003c/code\u003e."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return \"[E] \" + expenseCategory.toUpperCase() + \" \" + super.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0260222": 59
    }
  },
  {
    "path": "src/main/java/moneytracker/transaction/Income.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.exception.MoneyTrackerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * Represents an income that a user has earned. An \u003ccode\u003eIncome\u003c/code\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * object has an amount, a description, a date and a category."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class Income extends Transaction {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private String incomeCategory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Initializes an \u003ccode\u003eIncome\u003c/code\u003e object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param amount Amount of money of an \u003ccode\u003eIncome\u003c/code\u003e."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param description Description of an \u003ccode\u003eIncome\u003c/code\u003e."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param date Date of an \u003ccode\u003eIncome\u003c/code\u003e."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public Income(double amount, String description, String date, String incomeCategory) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        super(amount, description, date);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.incomeCategory \u003d incomeCategory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Initializes an \u003ccode\u003eIncome\u003c/code\u003e object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param amount Amount of money of an \u003ccode\u003eIncome\u003c/code\u003e."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param description Description of an \u003ccode\u003eIncome\u003c/code\u003e."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public Income(double amount, String description, String incomeCategory) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        super(amount, description);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.incomeCategory \u003d incomeCategory;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Gets the category of an \u003ccode\u003eIncome\u003c/code\u003e."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @return Category of an \u003ccode\u003eIncome\u003c/code\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public String getIncomeCategory() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return incomeCategory;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Sets the category of an \u003ccode\u003eIncome\u003c/code\u003e."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param incomeCategory Category of an \u003ccode\u003eIncome\u003c/code\u003e ."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void setIncomeCategory(String incomeCategory) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.incomeCategory \u003d incomeCategory;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Gets the String representation of an \u003ccode\u003eIncome\u003c/code\u003e."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return \"[I] \" + incomeCategory.toUpperCase() + \" \" + super.toString();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0260222": 59
    }
  },
  {
    "path": "src/main/java/moneytracker/transaction/Transaction.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.exception.MoneyTrackerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * Represents a transaction that a user has made. A \u003ccode\u003eTransaction\u003c/code\u003e object has an amount,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * a description and a date. This class defines the common behaviours that can be inherited by"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * subclasses with specific implementation of a transaction."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "public abstract class Transaction {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private double amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Initializes a \u003ccode\u003eTransaction\u003c/code\u003e object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param amount Amount of money in a \u003ccode\u003eTransaction\u003c/code\u003e."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param description Description of a \u003ccode\u003eTransaction\u003c/code\u003e."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param date Date of a \u003ccode\u003eTransaction\u003c/code\u003e."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If date format is invalid."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public Transaction(double amount, String description, String date) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            this.date \u003d LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"Date should be in yyyy-MM-dd format. E.g. 2020-12-25\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Initializes a \u003ccode\u003eTransaction\u003c/code\u003e object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param amount Amount of money in a \u003ccode\u003eTransaction\u003c/code\u003e."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param description Description of a \u003ccode\u003eTransaction\u003c/code\u003e."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public Transaction(double amount, String description) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.date \u003d LocalDate.now();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Gets the amount of a \u003ccode\u003eTransaction\u003c/code\u003e."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @return Amount of a \u003ccode\u003eTransaction\u003c/code\u003e."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    public String getAmount() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        return String.valueOf(amount);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Gets the typename of a \u003ccode\u003eTransaction\u003c/code\u003e object."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param description Description of a transaction."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @return typename of a \u003ccode\u003eTransaction\u003c/code\u003e object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public String getTypeName(String description) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        return description.split(\" \")[1];"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Sets the amount of a \u003ccode\u003eTransaction\u003c/code\u003e."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param amount Amount of money in a \u003ccode\u003eTransaction\u003c/code\u003e."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void setAmount(double amount) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Gets the description of a \u003ccode\u003eTransaction\u003c/code\u003e."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @return Description of a \u003ccode\u003eTransaction\u003c/code\u003e."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Sets the Description of a \u003ccode\u003eTransaction\u003c/code\u003e."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param description Description of a \u003ccode\u003eTransaction\u003c/code\u003e."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If date format is invalid."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Gets the date of a \u003ccode\u003eTransaction\u003c/code\u003e."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @return Date of a \u003ccode\u003eTransaction\u003c/code\u003e."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    public String getDate() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        return date.toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "    public LocalDate getLocalDate() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "    public double getAmountNumber() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Sets the date of a \u003ccode\u003eTransaction\u003c/code\u003e."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param date Date of a \u003ccode\u003eTransaction\u003c/code\u003e."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If date format is invalid."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void setDate(String date) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            this.date \u003d LocalDate.parse(date, formatter);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"Date should be in yyyy-MM-dd format. E.g. 2020-12-25\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    public String setMonth() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        DateTimeFormatter formattedMonth \u003d DateTimeFormatter.ofPattern(\"yyyy-MM\", Locale.ENGLISH);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        return formattedMonth.format(this.date);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Gets the String representation of a \u003ccode\u003eTransaction\u003c/code\u003e."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        String output \u003d \"$\" + String.format(\"%.2f\", amount) + \" on \""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                + date.format(DateTimeFormatter.ofPattern(\"d MMM yyyy\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        if (description.isEmpty()) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            return output + \" (\" + description + \")\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daiweinus": 12,
      "dgc5213": 34,
      "e0260222": 96,
      "Chenduo1412": 9
    }
  },
  {
    "path": "src/main/java/moneytracker/transaction/TransactionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.exception.MoneyTrackerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * Manages the in-memory transaction list. It contains an ArrayList that stores"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * individual \u003ccode\u003eTransaction\u003c/code\u003e objects and methods to perform operations"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * such as adding and deleting transactions."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class TransactionList {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    private ArrayList\u003cTransaction\u003e transactions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    private final ArrayList\u003cInteger\u003e searchResultIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    private boolean isInitialized \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Initializes an empty \u003ccode\u003eTransactionList\u003c/code\u003e object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public TransactionList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Initializes a \u003ccode\u003eTransactionList\u003c/code\u003e object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public TransactionList(ArrayList\u003cTransaction\u003e transactions) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.transactions \u003d transactions;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Gets a \u003ccode\u003eTransaction\u003c/code\u003e object from the \u003ccode\u003eTransactionList\u003c/code\u003e."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param index Index of \u003ccode\u003eTransaction\u003c/code\u003e in the \u003ccode\u003eTransactionList\u003c/code\u003e."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @return \u003ccode\u003eTransaction\u003c/code\u003e object."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public Transaction getTransaction(int index) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return transactions.get(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Adds a transaction to the \u003ccode\u003eTransactionList\u003c/code\u003e."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param transaction \u003ccode\u003eTransaction\u003c/code\u003e."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If the category does not exist."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void addTransaction(Transaction transaction, CategoryList categories) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String category;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String type;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (transaction instanceof Income) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            category \u003d ((Income) transaction).getIncomeCategory();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            type \u003d \"INCOME\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            categories.checkIfCategoryExists(category, type);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            category \u003d ((Expense) transaction).getExpenseCategory();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            type \u003d \"EXPENSE\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (categories.checkIfCategoryExists(category, type)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            transactions.add(transaction);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"The category \\\"\" + category + \"\\\" does not exist.\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Remove a \u003ccode\u003eTransaction\u003c/code\u003e object from the \u003ccode\u003eTransactionList\u003c/code\u003e."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param index Index of a \u003ccode\u003eTransaction\u003c/code\u003e in \u003ccode\u003eTransactionList\u003c/code\u003e."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @throws MoneyTrackerException If index is invalid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void removeTransaction(int index) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            transactions.remove(transactions.get(index));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            throw new MoneyTrackerException(\"Invalid index\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Gets the size of a \u003ccode\u003eTransactionList\u003c/code\u003e."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @return Size of a \u003ccode\u003eTransactionList\u003c/code\u003e."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    public int getSize() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        return transactions.size();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Gets the status of whether the list command has been used."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    public boolean getIsInitialized() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        return isInitialized;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Sets the status that the list command has just been used."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void setIsInitialized(boolean isInitialized) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        this.isInitialized \u003d isInitialized;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Adds index for a particular transaction listed by the list command."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param searchResultIndex Index of transaction listed by the list command."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    public void addSearchResultIndex(int searchResultIndex) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        searchResultIndexes.add(searchResultIndex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Clears the indexes from the list command."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void clearSearchResultIndexes() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        searchResultIndexes.clear();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Gets the indexes from the list command."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    public ArrayList\u003cInteger\u003e getSearchResultIndexes() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        return searchResultIndexes;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Gets the index for a particular \u003ccode\u003eTransaction\u003c/code\u003e listed by the list command."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param resultIndex Index of \u003ccode\u003eTransaction\u003c/code\u003e in the \u003ccode\u003eTransactionList\u003c/code\u003e."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    public int getSearchResultIndex(int resultIndex) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        return searchResultIndexes.get(resultIndex);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Clears the \u003ccode\u003eTransactionList\u003c/code\u003e."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void clearTransactions() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        transactions.clear();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "    public ArrayList\u003cTransaction\u003e getTransactions() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "        return transactions;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Updates the category name of \u003ccode\u003eTransaction\u003c/code\u003e objects in the \u003ccode\u003eTransactionList\u003c/code\u003e."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param currentName Current category name of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @param newName New category name of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void updateTransactionsCategory(String currentName, String newName) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        for (int i \u003d 0; i \u003c transactions.size(); i++) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            Transaction transaction \u003d transactions.get(i);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            if (transaction instanceof Income \u0026\u0026 ((Income) transaction).getIncomeCategory().equals(currentName)) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                ((Income) transaction).setIncomeCategory(newName);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            if (transaction instanceof Expense \u0026\u0026 ((Expense) transaction).getExpenseCategory().equals(currentName)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                ((Expense) transaction).setExpenseCategory(newName);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dgc5213": 26,
      "e0260222": 130,
      "Chenduo1412": 6
    }
  },
  {
    "path": "src/main/java/moneytracker/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.summary.Budget;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "import moneytracker.exception.MoneyTrackerException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import moneytracker.parser.Parser;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import moneytracker.transaction.TransactionList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import moneytracker.transaction.Transaction;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "import moneytracker.transaction.Income;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "import moneytracker.transaction.Expense;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import moneytracker.transaction.Category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import moneytracker.transaction.CategoryList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * Contains methods that interacts with the users such as obtaining commands"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * from user input and displaying messages to the users."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public static final String LINE \u003d \"____________________________________________________________________\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    public static final String INDENT \u003d \"   \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Gets the input stream from the user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * @return Input stream from the user."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public String readUserCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        Scanner in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        System.out.print(\"You:  \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        return in.nextLine().trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void printLogo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String logo \u003d \" __  __                          _______             _             \" + System.lineSeparator()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                + \"|  \\\\/  |                        |__   __|           | |            \" + System.lineSeparator()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                + \"| \\\\  / | ___  _ __   ___ _   _     | |_ __ __ _  ___| | _____ _ __ \" + System.lineSeparator()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                + \"| |\\\\/| |/ _ \\\\| \u0027_ \\\\ / _ \\\\ | | |    | | \u0027__/ _` |/ __| |/ / _ \\\\ \u0027__|\" + System.lineSeparator()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                + \"| |  | | (_) | | | |  __/ |_| |    | | | | (_| | (__|   \u003c  __/ |   \" + System.lineSeparator()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                + \"|_|  |_|\\\\___/|_| |_|\\\\___|\\\\__, |    |_|_|  \\\\__,_|\\\\___|_|\\\\_\\\\___|_|   \" + System.lineSeparator()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                + \"                          __/ |                                    \" + System.lineSeparator()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                + \"                         |___/                                     \" + System.lineSeparator();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        System.out.println(logo);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void printWelcome() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        System.out.println(\"Hello! What can I do for you? Enter the command \\\"help\\\" to access the user guide.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "    public void printSummary(double exp, double inc) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "        System.out.println("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "                \"Your total income for \" + LocalDate.now().getMonth().getDisplayName(TextStyle.SHORT, Locale.US)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "                + \" \" + LocalDate.now().getYear() + \": $\" + String.format(\"%.2f\", inc)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "                + \"\\nYour total expense for \" + LocalDate.now().getMonth().getDisplayName(TextStyle.SHORT, Locale.US)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "                + \" \" + LocalDate.now().getYear() + \": $\" + String.format(\"%.2f\", exp));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void printAddTransaction(TransactionList transactions) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        Transaction transactionToPrint \u003d transactions.getTransaction(transactions.getSize() - 1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        if (transactionToPrint instanceof Income) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            System.out.println(\"Got it! I have added this income:\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        } else if (transactionToPrint instanceof Expense) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            System.out.println(\"Got it! I have added this expense:\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            throw new MoneyTrackerException(\"The transaction type is invalid\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        printIndentation();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        System.out.println(transactionToPrint.toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        printIndentation();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        System.out.println(\"Now you have \" + transactions.getSize() + \" transactions in your list.\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void printAddCategory(CategoryList categories) throws MoneyTrackerException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        Category categoryToPrint \u003d categories.getCategory(categories.getSize() - 1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        if (categoryToPrint.getType().equals(\"INCOME\")) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            System.out.println(\"Got it! I have added this income category:\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        } else if (categoryToPrint.getType().equals(\"EXPENSE\")) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            System.out.println(\"Got it! I have added this expense category:\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            throw new MoneyTrackerException(\"The category type is invalid\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        printIndentation();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        System.out.println(categoryToPrint);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        printIndentation();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        System.out.println(\"Now you have \" + categories.getSize() + \" categories in your list.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void printRemoveCategory(int size, String description, String type) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        System.out.println(\"Noted! I have removed this \" + type + \": \");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        printIndentation();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        System.out.println(description);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        printIndentation();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        System.out.println(\"Now you have \" + size + \" categories in the list.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void printEditItem(String oldDescription, String newDescription, String type) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        System.out.println(\"Noted! I have edited this \" + type + \": \");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        printIndentation();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        System.out.println(\"From \" + oldDescription + \" to \" + newDescription);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void printError(String errorMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        System.out.println(\"OOPS!! \" + errorMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "     * Print the budget you have set."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void printBudget(Budget budget) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        double amount \u003d budget.getAmount();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String amountString \u003d String.format(\"%.2f\", amount);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        System.out.println(\"Got it! I have set your monthly budget to this amount:\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        printIndentation();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        System.out.println(\"$\" + amountString);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "     * Print the percentage of the budget that has been exceeded."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "    public void printPctOfBudget(String str, double amount) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "        System.out.println(\"You have exceeded \" + str + \" of your budget of $\" + String.format(\"%.2f\", amount) + \" for \""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "                + LocalDate.now().getMonth().getDisplayName(TextStyle.SHORT, Locale.US)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "                + \" \" + LocalDate.now().getYear() + \".\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Chenduo1412"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void printHelp() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        System.out.println(\"Please refer this online user guide:\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        System.out.println(\"https://ay2021s1-tic4001-2.github.io/tp/UserGuide.html\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void printGoodbye() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        System.out.println(\"Bye! Hope to see you again soon.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void printClearConfirmation() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        System.out.println(\"Are you sure you want to clear all data? Y / N\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void printClearAllData(String confirmation) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        if (confirmation.equals(\"Y\")) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            System.out.println(\"Noted! I have cleared all data.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } else if (confirmation.equals(\"N\")) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            System.out.println(\"Noted! Your data is untouched.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            System.out.println(\"Sorry, please enter \\\"Y\\\" or \\\"N\\\" only\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void printRemoveTransaction(int size, String description, String type) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        System.out.println(\"Noted! I have removed this \" + type + \": \");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        printIndentation();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        System.out.println(description);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        printIndentation();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        System.out.println(\"Now you have \" + size + \" transactions in the list.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void printLine() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        System.out.println(LINE);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    public void printIndentation() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        System.out.print(INDENT);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     * Executes the list transactions command."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     * @param transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    public void printListTransaction(TransactionList transactions) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        if (transactions.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            System.out.println(\"Sorry, there is no transaction in your list.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            System.out.println(\"Here are your transactions:\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            for (int i \u003d 0; i \u003c transactions.getSize(); i++) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                printIndentation();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                System.out.println((i + 1) + \". \" + transactions.getTransaction(i).toString());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     * Executes the printMyFilteredTransactions comman."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     * To Print all the transactions in the filteredTransaction array list."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     * @param filteredTransaction ArrayList of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    public void printMyFilteredTransactions(ArrayList\u003cTransaction\u003e filteredTransaction) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        System.out.println(\"Here are your transactions:\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        for (int i \u003d 0; i \u003c filteredTransaction.size(); i++) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            printIndentation();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            System.out.println((i + 1) + \". \" + filteredTransaction.get(i));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     * Executes the Filtered Categories command."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     *"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     * @param categories List of \u003ccode\u003ecategories\u003c/code\u003e objects."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    private void printFilteredCategories(CategoryList categories) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        ArrayList\u003cInteger\u003e searchResultIndexes \u003d categories.getSearchResultIndexes();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            for (int i \u003d 0; i \u003c searchResultIndexes.size(); i++) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                printIndentation();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                System.out.println((i + 1) + \". \" + categories.getCategory(searchResultIndexes.get(i)).toString());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     * Executes the list category command."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     * @param categories List of \u003ccode\u003ecategories\u003c/code\u003e objects."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    public void printListCategory(CategoryList categories) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        if (categories.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            System.out.println(\"Sorry, there is no category in your list.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            System.out.println(\"Here are your categories:\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            for (int i \u003d 0; i \u003c categories.getSize(); i++) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                printIndentation();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                System.out.println((i + 1) + \". \" + categories.getCategory(i).toString());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     * Executes the list category command to display expense categoty only."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     *"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     * @param categories List of \u003ccode\u003ecategories\u003c/code\u003e objects."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    public void printListCategoryExpenseOnly(CategoryList categories) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        categories.setIsInitialized(true);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        categories.clearSearchResultIndexes();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        if (categories.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            System.out.println(\"Sorry, there is no category in your list.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            System.out.println(\"Here are your expenses categories:\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            for (int i \u003d 0; i \u003c categories.getSize(); i++) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                if (categories.getCategory(i).getType().equals(\"EXPENSE\")) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                    categories.addSearchResultIndex(i);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        printFilteredCategories(categories);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     * Executes the list category command to display income categoty only."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     *"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     * @param categories List of \u003ccode\u003ecategories\u003c/code\u003e objects."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    public void printListCategoryIncomeOnly(CategoryList categories) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        categories.setIsInitialized(true);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        categories.clearSearchResultIndexes();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        if (categories.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            System.out.println(\"Sorry, there is no category in your list.\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            System.out.println(\"Here are your income categories:\");"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            for (int i \u003d 0; i \u003c categories.getSize(); i++) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                if (categories.getCategory(i).getType().equals(\"INCOME\")) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                    categories.addSearchResultIndex(i);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        printFilteredCategories(categories);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Gets transaction/category  Month report from user\u0027s full input string."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param date month of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public void printReportByMonth(TransactionList transactions, String date) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        transactions.setIsInitialized(true);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        transactions.clearSearchResultIndexes();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        if (transactions.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            System.out.println(\"Sorry, there is no transactions in your list.\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            System.out.println(\"Here is your transactions for \" + date + \" :\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            double totalIncome \u003d Parser.getTotalIncome(transactions,date);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            System.out.printf(\"Total Income: $%.2f\\n\",(totalIncome));"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            double totalExpense \u003d Parser.getTotalExpense(transactions,date);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            System.out.printf(\"Total Expense: $%.2f\\n\",(totalExpense));"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            double balance \u003d totalIncome - totalExpense;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            System.out.printf(\"Balance: $%.2f\\n\",(balance));"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            double average \u003d totalExpense / Parser.getDaysOfMonth(date);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            System.out.println(\"\\nThis month has \" + Parser.getDaysOfMonth(date) + \" days.\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            System.out.printf(\"Average Expense Per Day: $%.2f\\n\",(average));"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            System.out.println(\"\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            String highestIncomeTrans \u003d Parser.getHighestIncome(transactions,date);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            System.out.println(\"Highest Income transaction: \\n\" + \"  \" + highestIncomeTrans);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            System.out.println(\"\");"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            String highestExpTrans \u003d Parser.getHighestExpense(transactions,date);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            System.out.println(\"Highest Income transaction: \\n\" + \"  \" + highestExpTrans);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            System.out.println(\"\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            System.out.println(\"Income Category by Frequency:\");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            Parser.getInCatFreq(transactions,date);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            System.out.println(\"\\nExpense Category by Frequency:\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            Parser.getExpCatFreq(transactions,date);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            System.out.println(\"\\nIncome Category by Amount:\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            Parser.getInCatAmount(transactions,date);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            System.out.println(\"\\nExpense Category by Amount:\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            Parser.getExpCatAmount(transactions,date);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            printLine();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Gets transaction/category last 6 Month report from user\u0027s full input string."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     *"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param transactions List of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * @param dates month list of \u003ccode\u003eTransaction\u003c/code\u003e objects."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public void printReport(TransactionList transactions, List\u003cString\u003e dates) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        transactions.setIsInitialized(true);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        transactions.clearSearchResultIndexes();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        printLine();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        if (transactions.getSize() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            System.out.println(\"Sorry, there is no transactions in your list.\");"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            System.out.println(\"Here is your report:\");"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            var lastSixIncome \u003d Parser.getSixMonIncome(transactions, dates);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            System.out.println(\"Income for last 6 months (Highest to lowest):\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            Parser.printInHelper(lastSixIncome);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            var lastSixExpense \u003d Parser.getSixMonExpense(transactions, dates);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            System.out.println(\"\\nIncome for last 6 months (Highest to lowest):\");"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            Parser.printExpHelper(lastSixExpense);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            printLine();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daiweinus": 91,
      "dgc5213": 153,
      "e0260222": 111,
      "Chenduo1412": 25
    }
  },
  {
    "path": "src/test/java/moneytracker/parser/ParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.exception.MoneyTrackerException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.Category;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import moneytracker.transaction.CategoryList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.transaction.Transaction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import moneytracker.transaction.TransactionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import org.junit.jupiter.api.AfterEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * JUnit tests for Parser class."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0260222"
        },
        "content": "class ParserTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Tests the createIncomeCategory method with valid input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void testCreateIncomeCategory() throws MoneyTrackerException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        Category testCategory \u003d Parser.createIncomeCategory(\"addcati salary\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assertEquals(\"[I] SALARY\", testCategory.toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Tests the createIncomeCategory method with incomplete input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void testCreateIncomeCategoryWithMissingValue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String errorMessage \u003d \"\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            Parser.createIncomeCategory(\"addcati\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (MoneyTrackerException e) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            errorMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assertEquals(\"The income category name is missing.\", errorMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Tests the createExpenseCategory method with valid input."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void testCreateExpenseCategory() throws MoneyTrackerException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        Category testCategory \u003d Parser.createExpenseCategory(\"addcate food\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assertEquals(\"[E] FOOD\", testCategory.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Tests the createExpenseCategory method with incomplete input."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void testCreateExpenseCategoryWithMissingValue() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String errorMessage \u003d \"\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            Parser.createExpenseCategory(\"addcate\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (MoneyTrackerException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            errorMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assertEquals(\"The expense category name is missing.\", errorMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Tests the createIncome method with valid input."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void testCreateIncome() throws MoneyTrackerException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        Transaction testIncome \u003d Parser.createIncome(\"addi /a5000 /cSalary /d2020-12-25 /e$1000 bonus!\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assertEquals(\"[I] SALARY $5000.00 on 25 Dec 2020 ($1000 bonus!)\", testIncome.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Tests the createIncome method with incomplete input."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void testCreateIncomeWithMissingValue() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String errorMessage \u003d \"\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            Parser.createIncome(\"addi /cSalary /d2020-12-25 /e$1000 bonus!\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (MoneyTrackerException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            errorMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assertEquals(\"The amount parameter is missing.\", errorMessage);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        errorMessage \u003d \"\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            Parser.createIncome(\"addi /a5000 /d2020-12-25 /e$1000 bonus!\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (MoneyTrackerException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            errorMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assertEquals(\"The income category parameter is missing.\", errorMessage);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Tests the createIncome method with invalid input."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void testCreateIncomeWithInvalidValue() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String errorMessage \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            Parser.createIncome(\"addi /aWEIRD /cSalary /d2020-12-25 /e$1000 bonus!\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (MoneyTrackerException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            errorMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assertEquals(\"The amount must be a decimal value. E.g. 30.50\", errorMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        errorMessage \u003d \"\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            Parser.createIncome(\"addi /a5000 /cSalary /d20201225 /e$1000 bonus!\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (MoneyTrackerException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            errorMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assertEquals(\"Date should be in yyyy-MM-dd format. E.g. 2020-12-25\", errorMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Tests the createExpense method with valid input."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void testCreateExpense() throws MoneyTrackerException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        Transaction testExpense \u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                Parser.createExpense(\"adde /a58.75 /cfood /d2020-12-25 /eExpensive dinner!\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assertEquals(\"[E] FOOD $58.75 on 25 Dec 2020 (Expensive dinner!)\", testExpense.toString());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Tests the createExpense method with incomplete input."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void testCreateExpenseWithMissingValue() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String errorMessage \u003d \"\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            Parser.createExpense(\"adde /cfood /d2020-12-25 /eExpensive dinner!\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (MoneyTrackerException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            errorMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assertEquals(\"The amount parameter is missing.\", errorMessage);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        errorMessage \u003d \"\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            Parser.createExpense(\"adde /a58.75 /d2020-12-25 /eExpensive dinner!\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (MoneyTrackerException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            errorMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assertEquals(\"The expense category parameter is missing.\", errorMessage);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Tests the createIncome method with invalid input."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void testCreateExpenseWithInvalidValue() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String errorMessage \u003d \"\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            Parser.createExpense(\"adde /aWEIRD /cfood /d2020-12-25 /eExpensive dinner!\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (MoneyTrackerException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            errorMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assertEquals(\"The amount must be a decimal value. E.g. 30.50\", errorMessage);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        errorMessage \u003d \"\";"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            Parser.createExpense(\"adde /a58.75 /cfood /d20201225 /eExpensive dinner!\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (MoneyTrackerException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            errorMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assertEquals(\"Date should be in yyyy-MM-dd format. E.g. 2020-12-25\", errorMessage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Tests the getTransactionIndex method with valid input."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void testGetTransactionIndex() throws MoneyTrackerException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assertEquals(6, Parser.getDeleteIndex(\"delete 7\"));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Tests the getTransactionIndex method with incomplete input."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void testGetTransactionIndexWithMissingValue() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String errorMessage \u003d \"\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            Parser.getDeleteIndex(\"delete\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (MoneyTrackerException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            errorMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assertEquals(\"The index is missing.\", errorMessage);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Tests the getTransactionIndex method with invalid values."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void testGetTransactionIndexWithInvalidValue() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String errorMessage \u003d \"\";"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            Parser.getDeleteIndex(\"delete WEIRD\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (MoneyTrackerException e) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            errorMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assertEquals(\"The index is invalid.\", errorMessage);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Tests the getEditCategoryParams method with valid input."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Test void testGetEditCategoryParams() throws MoneyTrackerException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String[] testEditParameters \u003d Parser.getEditCategoryParams(\"editcat 1 /ndividend\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assertEquals(\"1\", testEditParameters[0]);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assertEquals(\"dividend\", testEditParameters[1]);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Tests the getEditCategoryParams method with incomplete input."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Test void testGetEditCategoryParamsWithMissingValue() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String errorMessage \u003d \"\";"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            Parser.getEditCategoryParams(\"editcat\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (MoneyTrackerException e) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            errorMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assertEquals(\"The index is missing.\", errorMessage);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Tests the getDate method with incorrect date month."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    void testGetDateWithWrongMonth() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        String errorMessage \u003d \"\";"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            Parser.getDate(\"2020-13\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        } catch (MoneyTrackerException e) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            errorMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        assertEquals(\"Date should be in yyyy-MM format. E.g. 2020-09\", errorMessage);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Tests the getDate method with incorrect date format."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    void testGetDateWithWrongDateFormat() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        String errorMessage \u003d \"\";"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            Parser.getDate(\"Sep 2020\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        } catch (MoneyTrackerException e) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "            errorMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        assertEquals(\"Date should be in yyyy-MM format. E.g. 2020-09\", errorMessage);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Tests the getDateOfMonth method with input."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    void testGetDaysOfMonth() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        assertEquals(30, Parser.getDaysOfMonth(\"2020-09\"));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        assertEquals(29, Parser.getDaysOfMonth(\"2020-02\"));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        assertEquals(31, Parser.getDaysOfMonth(\"2020-07\"));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        assertEquals(31, Parser.getDaysOfMonth(\"2020-08\"));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    private final TransactionList testTrans \u003d new TransactionList();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    private final CategoryList testCate \u003d new CategoryList();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Tests before init input."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public void init() throws MoneyTrackerException {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        Category testCate1 \u003d Parser.createIncomeCategory(\"Salary\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        Category testCate2 \u003d Parser.createExpenseCategory(\"Food\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        testCate.addCategory(testCate1);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        testCate.addCategory(testCate2);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        Transaction testIncome1 \u003d Parser.createIncome(\"addi /a1000 /cSalary /d2020-12-25 /eBonus\");"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        Transaction testIncome2 \u003d Parser.createIncome(\"addi /a5000 /cSalary /d2020-12-25 /eBonus\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        Transaction testExpense1 \u003d Parser.createExpense(\"adde /a5.5 /cFood /d2020-12-25 /eFood\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        Transaction testExpense2 \u003d Parser.createExpense(\"adde /a4.5 /cFood /d2020-12-25 /eFood\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        testTrans.addTransaction(testIncome1,testCate);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        testTrans.addTransaction(testIncome2,testCate);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        testTrans.addTransaction(testExpense1,testCate);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        testTrans.addTransaction(testExpense2,testCate);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Tests the getTotalIncome method with input."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    void testGetTotalIncome() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        assertEquals(6000,Parser.getTotalIncome(testTrans,\"2020-12\"));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Tests the getTotalExpense method with input."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    void testGetTotalExpense() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        assertEquals(10.0, Parser.getTotalExpense(testTrans,\"2020-12\"));"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Tests the getHighestIncome method with input."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    void testGetHighestIncome() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        assertEquals(\"[I] SALARY $5000.00 on 25 Dec 2020 (Bonus)\","
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "                Parser.getHighestIncome(testTrans,\"2020-12\"));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Tests the getHighestExpense method with input."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    void testGetHighestExpense() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        assertEquals(\"[E] FOOD $5.50 on 25 Dec 2020 (Food)\","
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "                Parser.getHighestExpense(testTrans,\"2020-12\"));"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Tests the getHighestIncome method with empty month input."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    void testGetHighestIncomeWithEmptyMonth() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        assertEquals(\"  Sorry, Cannot find any Income record in this Month.\","
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "                Parser.getHighestIncome(testTrans,\"2020-11\"));"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Tests the getFrequency method with input."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    void testGetFrequency() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        ArrayList\u003cString\u003e test \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        test.add(\"Food\");"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        test.add(\"Salary\");"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        test.add(\"Food\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        Parser.getFrequency(test);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        assertEquals(\"{Food\u003d2, Salary\u003d1}\",Parser.getFrequency(test).toString());"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * Tests the sortHelper method with input."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    void testSortHelper() {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        Map\u003cString, Double\u003e testMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        testMap.put(\"Food\",5.5);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        testMap.put(\"Salary\",1000.0);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        testMap.put(\"Drink\",5.6);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        assertEquals(\"{Salary\u003d1000.0, Drink\u003d5.6, Food\u003d5.5}\",Parser.sortHelper(testMap).toString());"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "daiweinus"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     * After test clear test List."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "     */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    @AfterEach"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    public void destroy() {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "        testTrans.clearTransactions();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "daiweinus"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "daiweinus": 149,
      "e0260222": 216,
      "-": 7
    }
  },
  {
    "path": "src/test/java/moneytracker/transaction/CategoryListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.exception.MoneyTrackerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * JUnit tests for CategoryList class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class CategoryListTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Tests the exception handling for duplicated \u003ccode\u003eCategory\u003c/code\u003e objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void testAddDuplicateCategory() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        CategoryList categories \u003d new CategoryList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        Category testCategory \u003d new Category(\"SALARY\", \"INCOME\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        Category testCategory2 \u003d new Category(\"SALARY\", \"INCOME\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        String errorMessage \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            categories.addCategory(testCategory);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            categories.addCategory(testCategory2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        } catch (MoneyTrackerException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0260222"
        },
        "content": "            errorMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assertEquals(\"This category already exists.\", errorMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Tests the checkIfCategoryExists method."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void testCheckIfCategoryExists() throws MoneyTrackerException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        CategoryList categories \u003d new CategoryList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        Category testCategory \u003d new Category(\"SALARY\", \"INCOME\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        Category testCategory2 \u003d new Category(\"FOOD\", \"EXPENSE\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        categories.addCategory(testCategory);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        categories.addCategory(testCategory2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assertTrue(categories.checkIfCategoryExists(\"SALARY\", \"INCOME\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assertTrue(categories.checkIfCategoryExists(\"FOOD\", \"EXPENSE\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assertFalse(categories.checkIfCategoryExists(\"WEIRD\", \"ITEM\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assertFalse(categories.checkIfCategoryExists(\"SALARY\", \"EXPENSE\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assertFalse(categories.checkIfCategoryExists(\"FOOD\", \"INCOME\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0260222": 48
    }
  },
  {
    "path": "src/test/java/moneytracker/transaction/CategoryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * JUnit tests for Category class."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class CategoryTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Tests the toString override for \u003ccode\u003eIncome\u003c/code\u003e object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void testIncomeToString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        Category testCategory \u003d new Category(\"SALARY\", \"INCOME\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assertEquals(\"[I] SALARY\", testCategory.toString());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     * Tests the toString override for \u003ccode\u003eExpense\u003c/code\u003e object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "e0260222"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void testExpenseToString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        Category testCategory \u003d new Category(\"FOOD\", \"EXPENSE\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assertEquals(\"[E] FOOD\", testCategory.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0260222": 28
    }
  },
  {
    "path": "src/test/java/moneytracker/transaction/ExpenseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.exception.MoneyTrackerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * JUnit tests for Expense class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class ExpenseTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void testToString() throws MoneyTrackerException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        Transaction testExpense \u003d new Expense(58.75, \"Expensive dinner\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                \"2020-12-25\", \"FOOD\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assertEquals(\"[E] FOOD $58.75 on 25 Dec 2020 (Expensive dinner)\", testExpense.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0260222": 18
    }
  },
  {
    "path": "src/test/java/moneytracker/transaction/IncomeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "package moneytracker.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import moneytracker.exception.MoneyTrackerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "e0260222"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "e0260222"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "e0260222"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "e0260222"
        },
        "content": " * JUnit tests for Income class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "e0260222"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "e0260222"
        },
        "content": "public class IncomeTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    public void testToString() throws MoneyTrackerException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        Transaction testIncome \u003d new Income(5000, \"$1000 bonus!\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "e0260222"
        },
        "content": "                \"2020-12-25\", \"SALARY\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "e0260222"
        },
        "content": "        assertEquals(\"[I] SALARY $5000.00 on 25 Dec 2020 ($1000 bonus!)\", testIncome.toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "e0260222"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "e0260222"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "e0260222": 18
    }
  },
  {
    "path": "src/test/java/moneytracker/transaction/TransactionListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "package moneytracker.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "import moneytracker.exception.MoneyTrackerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "class TransactionListTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    TransactionList transactions \u003d new TransactionList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     * Tests the removeTransaction method."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    void removeTransaction() throws MoneyTrackerException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        CategoryList categories \u003d new CategoryList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        Category testCategory \u003d new Category(\"SALARY\", \"INCOME\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        Category testCategory2 \u003d new Category(\"FOOD\", \"EXPENSE\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        categories.addCategory(testCategory);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        categories.addCategory(testCategory2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        Transaction testIncome \u003d new Income(5000, \"$1000 bonus!\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                \"2020-12-25\", \"SALARY\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        transactions.addTransaction(testIncome,  categories);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        String errorMessage \u003d \"\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            transactions.removeTransaction(4);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        } catch (MoneyTrackerException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            errorMessage \u003d e.getMessage();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        assertEquals(\"Invalid index\", errorMessage);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     * Tests the getSize method."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    void getSize() throws MoneyTrackerException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        CategoryList categories \u003d new CategoryList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        Category testCategory \u003d new Category(\"SALARY\", \"INCOME\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        Category testCategory2 \u003d new Category(\"FOOD\", \"EXPENSE\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        categories.addCategory(testCategory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        categories.addCategory(testCategory2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        Transaction testIncome \u003d new Income(5000, \"$1000 bonus!\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                \"2020-12-25\", \"SALARY\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        transactions.addTransaction(testIncome,  categories);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        int size \u003d transactions.getSize();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        assertEquals(1,size);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     * Tests the clearTransactions method."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    void clearTransactions() throws MoneyTrackerException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        CategoryList categories \u003d new CategoryList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        Category testCategory \u003d new Category(\"SALARY\", \"INCOME\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        Category testCategory2 \u003d new Category(\"FOOD\", \"EXPENSE\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        categories.addCategory(testCategory);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        categories.addCategory(testCategory2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        Transaction testIncome \u003d new Income(5000, \"$1000 bonus!\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                \"2020-12-25\", \"SALARY\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        transactions.addTransaction(testIncome,  categories);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        transactions.clearTransactions();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        int size \u003d transactions.getSize();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        assertEquals(0,size);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     * Tests the getTransactions method."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    void getTransactions() throws MoneyTrackerException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        CategoryList categories \u003d new CategoryList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        Category testCategory \u003d new Category(\"SALARY\", \"INCOME\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        Category testCategory2 \u003d new Category(\"FOOD\", \"EXPENSE\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        categories.addCategory(testCategory);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        categories.addCategory(testCategory2);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        Transaction testIncome \u003d new Income(5000, \"$1000 bonus!\","
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                \"2020-12-25\", \"SALARY\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        transactions.addTransaction(testIncome,  categories);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        assertEquals(\"[[I] SALARY $5000.00 on 25 Dec 2020 ($1000 bonus!)]\", transactions.getTransactions().toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dgc5213": 100
    }
  },
  {
    "path": "src/test/java/moneytracker/transaction/TransactionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "package moneytracker.transaction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "import moneytracker.exception.MoneyTrackerException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "class TransactionTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    private Transaction testExpense1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            testExpense1 \u003d new Expense(100.0, \"Expensive dinner\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "                    \"2020-11-25\", \"FOOD\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        } catch (MoneyTrackerException e) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    void getAmount() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        assertEquals(\"100.0\", testExpense1.getAmount());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    void getDescription() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        assertEquals(\"Expensive dinner\", testExpense1.getDescription());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    void getDate() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "        assertEquals(\"2020-11-25\", testExpense1.getDate());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "dgc5213"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "dgc5213"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "dgc5213": 36
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "e0260222"
        },
        "content": "exit"
      }
    ],
    "authorContributionMap": {
      "e0260222": 1
    }
  }
]
